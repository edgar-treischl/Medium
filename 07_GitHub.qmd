# Git(Hub): A Gentle Introduction for R Users

```{r setup, include=FALSE}
has_bash <- Sys.which('bash') != '' && .Platform$OS.type != 'windows'
```

## Introduction

Git is a version control system that allows you to track changes in your code over time. It is a powerful tool to share your work, collaborate with others, and automate repetitive tasks. GitHub (also GitLab) is platform for developers to share their code, collaborate on projects, and build software. Foremost, it is a host for Git-based projects. Let me give one concrete example: Suppose you shared your code on GitHub. Of course, other people can download your code from your GitHub account, but they can also run your code directly in their R console. This is possible because of the `source_url` function from the `devtools` package allows you to run R code directly from a URL. The next time you make an update, your collegues can simply run the same code again and get the updated version:

```{r}
link <- paste0("https://raw.githubusercontent.com/",
               "edgar-treischl/edgar/refs/heads/",
               "master/inst/graphs/long_wide.R")

devtools::source_url(link)
showplot()
```

Thus, Git is a must have tool for any data scientist and GitHub is game changer in many ways. This article introduces Git and GitHub to R users. Some R packages as well R Studio makes it in particular smooth to work with Git and GitHub and this article focus exactly on this point. If you are not an R user, consider reading a different introduction to Git. This article is structured as follows: First, I show the workaround to use Git and GitHub in RStudio. Next, I provide the basics commands to work and trouble-shoot with Git. Finally, I introduce Gist, a simple way to share code snippets.

## Getting started

To get you started, we need three steps: First, we need to install Git on your local machine. Second, we need to create a GitHub account. Third, we need to connect Git(Hub) and R Studio.

### Install Git

Please find the installation instructions for your operating system below:

-   Windows: https://git-scm.com/download/win
-   OS X: https://git-scm.com/download/mac
-   Debian/Ubuntu: sudo apt-get install git-core

After you have installed Git, you can check if it was an success by typing `git --version` in your console. If all went well, it should return the installed version.

```{bash eval = has_bash}
# I am git code to check if git is installed

# Go to the console and type:
git --version
```

Next, you need to introduce yourself. Git needs to know who you are and how to reach you. Introduce your self via `git config` and set your user name and email address. You can do this either in the console or with the `usethis` package. The latter has more to than to introduce yourself and we will come back to the package in a minute.

``` bash
# Set your user name and email address via bash
git config --global user.name "User Name"
git config --global user.email "email@adress.com"
```

```{r, eval=FALSE}
# Set your user name and email address via R
library(usethis)
use_git_config(user.name = "Jane Doe",
               user.email = "jane@example.org")
```

Check if the configuration was successful by typing `git config --global --list` in your console.

```{bash eval = has_bash}
git config --global --list
```

Before we can go on, we need get a bit more familiar with Git(Hub). Unfortunately, Git(Hub) is full of technical jargon and one of the reasons why Git might be a bit scary if you only just began. But don't worry, at this point we only need a first understanding of the most important terms:

-   **Repository**: A folder with all project files
-   **Push**: Send code (files) to Git
-   **Pull**: Get code (files) from a Git repository
-   **Commit**: A snapshot of a repository at a certain point in time
-   **Branch**: A parallel version within the repository to test new features
-   **Merge**: Combine two branches
-   **Merge conflicts**: When two branches have changed the same part of a file, Git will not be able to automatically determine what is correct
-   **Forks**: Forks are interconnected repositories, for example, to examine a repository from someone else
-   **Pull requests**: A way to suggest changes to a repository

Certainly, it does not come naturally to push and pull code, commit changes, or other terms, but we establish a deeper understanding if we put them into practice. Let's go on and create a free GitHub account:

-   Windows: https://github.com/

After you have created your account you need to connect GitHub and R Studio via a personal access token (PAT). You need to store the PAT in order to connect R Studio and GitHub.



The `usethis` package makes this quite easy. The `create_github_token()` function will open a browser window with the corresponding GitHub website (https://github.com/settings/tokens) to create a token. GitHub offers plenty of possibilities to create a token. You can set the token to expire after a certain time, you can limit the token to certain repositories, and you can limit the token to certain actions. For now, just create a token with the default settings.

```{r, eval=FALSE}
# The create_github_token() function will open a browser window to create a token
usethis::create_github_token()
```

The `set_github_pat()` function from the `cdredentials` package will hand over your PAT if you connect to GitHub and store the token for. Run the function and paste your token in to the menu that pops up.

```{r, eval=FALSE}
#The set_github_pat() function will store the token
credentials::set_github_pat()
```


Finally, check if R Studio is connected to GitHub with the `gh` package. The `gh_whoami()` function will show you who you are on GitHub.

```{r}
# Actually, whoami will show you who you are on GitHub ...
gh::gh_whoami()
```


If R Studio knows who you are on GitHub, you are ready to go. All the descriped last steps are past behind you and you only need to run them once. The next steps shows you how to work with Git and GitHub in R Studio on a daily basis.



Go back to the GitHub website and create a new repository. The new repository is just a test repository. So, never mind about the options you have when you create a new repository. You can make it public or private, you can add a README file (for your future users), and you can add a license. For now, we just create a new repository without any additional options.



![](plots/07/Fig_0903.png)

After you have created the repository, you will see the quick setup guide. The guide shows you how to connect your local repository with the remote repository on GitHub,  but we can connect via the *https* link. Just copy the link and go back to R Studio.




![](plots/07/Fig_0904.png)



In order to connect your local repository with the remote repository on GitHub, we need to clone it. Essentially cloning means that we copy the remote repository to our local machine. R Studio makes pretty straightforward if we use the Project Wizard: (1.) Create a new project in R Studio and click next. (2) Pick Version Control. (3) Pick Git. (4) Paste the repository URL into the corresponding field to create a new project. The next image shows the last step only.

![](plots/07/Fig_0905.png)

R Studio will clone the repository and the Git pane should be activated in the upper right corner (Restart R Studio and check the settings if the pane won't show up automatically). The Git pane makes the basic commands to work with Git available and it shows graphically the status of your repository. Your Git pane is still empty but if you start working on your project, R Studio shows the differences between the local and the remote repository. The next image shows the Git pane after you have made some changes to your project.


![](plots/07/Fig_0906.png)

So, create a new R script, insert some code, and save the script. The new file should appear in the Git pane and R Studio will mark it with a yellow with a question mark, because it can't be tracked and it will become a teal A (for added file) if we stage the file. We will learn what that means in a minute. As the last images highlighted, same happens if you modify, delete a file, or rename a file.

Now that we worked on the project, how do we save the changes and push them to the remote repository? After you created and saved a new file, you have to stage the file. Staging means that you tell Git to track the file. You can stage a file by clicking on the check box in the Git pane. Next we add a commit message. A commit message is a short description of the changes you made. It is good practice to write a short but meaningful commit message. If you are happy with your commit message, you can commit the changes by clicking on the commit button. To commit means that you save the changes of the last steps locally. Finally, you can push the changes to the remote repository on GitHub via the push button. The next image shows the described steps in the Git pane.

![](plots/07/Fig_0907.png)

If everything works out, a 



### Why Hosts like GitHub?

-   Websites for projects

-   ...
