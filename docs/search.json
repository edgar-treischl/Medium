[
  {
    "objectID": "03_ggplot2_ext.html",
    "href": "03_ggplot2_ext.html",
    "title": "3  Ten additional geoms for ggplot2",
    "section": "",
    "text": "3.1 Alluvial\nThe ggplot2 package is awesome to create visualizations. It offers a wide range of possibilities to create a lot visualizations, it even lets you create visualizations from the ground. Moreover, there are plenty of ggplot2 extensions packages: ggplot2 extensions are packages that provide additional geoms, stats, scales, and themes to ggplot2. These packages extend the possibilities of ggplot2.\nI introduce in this article ten packages that provide an additional geom. (1) I describe each visualization briefly. (2) I show an example graph. (3) I provide a minimal code snippet to recreate such a graph with implemented data.\nBy relying on implemented data, you can easily recreate the graph without the need download or prepare data. The minimal code snippets are a great starting point to explore the possibilities of the ggplot2 extension packages.\nAlluvial diagrams depict the flow of data between different categories. The width of the lines is proportional to the number of observations that flow from one category to another. For example, I used official data from German School Departments to depict the change of school types (downward and upward mobility) within a given year. As the plot shows, most pupils change to a lower school type and in consequence downward mobility is larger in Germany.\nThe ggalluvial package has implemented the geom_alluvium() and geom_stratum() functions to create alluvial plots (Brunson and Read 2020). The geom_alluvium() function creates the flow of data between categories, while the geom_stratum() function adds the categories to the plot. The minimal code example shows how to create an alluvial plot with the titanic data. Provide the data in a wide format.\n#Minimal code example #####\nlibrary(ggplot2)\nlibrary(ggalluvial)\n#A wide data format\ntitanic_wide_format &lt;- data.frame(Titanic)\n\nggplot(data = titanic_wide_format,\n       aes(axis1 = Class, axis2 = Sex, axis3 = Age, y = Freq)) +\n  geom_alluvium(aes(fill = Survived)) +\n  geom_stratum()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ten additional geoms for ggplot2</span>"
    ]
  },
  {
    "objectID": "03_ggplot2_ext.html#beeswarm-plots",
    "href": "03_ggplot2_ext.html#beeswarm-plots",
    "title": "3  Ten additional geoms for ggplot2",
    "section": "3.2 Beeswarm plots",
    "text": "3.2 Beeswarm plots\nScatter plots are often used to visualize the relationship between two numerical variables. However, scatter plots can be difficult to interpret when there are many data points. A beeswarm plot is a great alternative to scatter plots, because it avoids over-plotting. Essentially, the beeswarm plot spreads the data points along the axis to avoid overlapping. For example, the following plot depicts body mass for each species and sex of the palmerpenguins data (Horst, Hill, and Gorman 2020).\n\n\n\n\n\n\n\n\n\nUse the geom_quasirandom() function from the ggbeeswarm package to create a beeswarm plot (Clarke and Sherrill-Mix 2017). The function spreads the data points along the axis to avoid overlapping. The method argument applies a specific algorithm to spread the data points. For example, pick quasirandom, pseudorandom, or smiley.\n\n#Minimal code example #####\nlibrary(ggbeeswarm)\n\nggplot(penguins, aes(species, body_mass_g, \n                     color = sex)) + \n    geom_quasirandom()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ten additional geoms for ggplot2</span>"
    ]
  },
  {
    "objectID": "03_ggplot2_ext.html#choropleth-maps",
    "href": "03_ggplot2_ext.html#choropleth-maps",
    "title": "3  Ten additional geoms for ggplot2",
    "section": "3.3 Choropleth maps",
    "text": "3.3 Choropleth maps\nA choropleth map is a great way to visualize geographical data. The color of each area is proportional to the observed value. The example plot shows the US unemployment rates in 2009.\n\n\n\n\n\n\n\n\n\nCreating a choropleth map can be tricky, because you need to match the data with the corresponding geographical areas.\nMoreover, the shape of the geographical areas must be drawn before filling them with the observed value. The ggplot2 provides the geom_sf() function to create a map (Wickham et al. 2022). The sf package is used to handle spatial data (sf?). Moreover, the ggmap package helps to create maps (Kahle, Wickham, and Jackson 2019; Kahle and Wickham 2013), because it provides the geom_map() function. The function fills the geographical areas with the observed value.\nThe minimal code example shows how to create a choropleth map with the USArrests data. The minimal code does not need any additional package and shows an example from the ggplot2 cheat sheet. If the corresponding geographical areas can be matched with the data, geom_map() draws the map and fills each area.\n\n#Minimal code example #####\n#Source: This example comes from the ggplot2 cheat sheet!\nmap &lt;- map_data(\"state\")\ndata &lt;- data.frame(murder = USArrests$Murder,\n                   state = tolower(rownames(USArrests)))\n\nggplot(data, aes(fill = murder))+\n  geom_map(aes(map_id = state), map = map)+\n  expand_limits(x = map$long, y = map$lat)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ten additional geoms for ggplot2</span>"
    ]
  },
  {
    "objectID": "03_ggplot2_ext.html#dot-and-whisker-plot-copilot-stopped-here",
    "href": "03_ggplot2_ext.html#dot-and-whisker-plot-copilot-stopped-here",
    "title": "3  Ten additional geoms for ggplot2",
    "section": "3.4 Dot-and-whisker plot: Copilot stopped here",
    "text": "3.4 Dot-and-whisker plot: Copilot stopped here\nA dot-and-whisker plot is a plot that shows the point estimates and confidence intervals of regression coefficients. It is a useful tool for visualizing the uncertainty associated with regression estimates. In the example below, I just run an example analysis with the palmerpenguins data.\n\n\n\n\n\n\n\n\n\nThe dotwhisker package creates dot-and-whisker plots. It allows users to customize the appearance of the plot by adjusting various parameters such as the color and size of the dots and whiskers. However, if you need to come up with a quick solution, the jtools package also implements convenient solutions.\n\nlibrary(dotwhisker)\nlibrary(palmerpenguins)\n\nm1 &lt;- lm(flipper_length_mm ~ bill_length_mm,\n           data = penguins)\nm2 &lt;- lm(flipper_length_mm ~ bill_length_mm + sex,\n           data = penguins)\n\ndwplot(list(m1, m2),\n       vline = geom_vline(xintercept = 0))",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ten additional geoms for ggplot2</span>"
    ]
  },
  {
    "objectID": "03_ggplot2_ext.html#dumbbell-and-lollipop-charts",
    "href": "03_ggplot2_ext.html#dumbbell-and-lollipop-charts",
    "title": "3  Ten additional geoms for ggplot2",
    "section": "3.5 Dumbbell and lollipop charts",
    "text": "3.5 Dumbbell and lollipop charts\nThe ggcharts package is for the lazy cats and gives access to a lot of common charts (Neitmann 2020). The package has implemented graphs such as dumbbell and lollipop charts with its own functions, and we don’t have to create each step on our own.\nFor example, create a dumbbell or a lollipop chart. I used the former to examine how life expectancy increased between 1952 and 2007 based on the gapminder data. The example shows the top 10 European countries with the highest increase in life expectancy.\n\n\n\n\n\n\n\n\n\n\n#Minimal code example #####\nlibrary(ggcharts)\ndata(\"popeurope\")\n\ndumbbell_chart(popeurope, \n               x = country,\n               y1 = pop1952, y2 = pop2007,\n               top_n = 10)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ten additional geoms for ggplot2</span>"
    ]
  },
  {
    "objectID": "03_ggplot2_ext.html#hexbin-map",
    "href": "03_ggplot2_ext.html#hexbin-map",
    "title": "3  Ten additional geoms for ggplot2",
    "section": "3.6 Hexbin map",
    "text": "3.6 Hexbin map\nCreate a hexbin map with ggplot2. A hexbin map is a great way to visualize the density of data points in a geographical area. It may surprise you, there is no extension package needed. The geom_polygon() function creates the hexbin map and here it shows US unemployment rates.\n\n\n\n\n\n\n\n\n\nThe graph is inspired by r-graph-gallery.com website. It shows a great variety of (ggplot2) visualization, provides a lot of resources to create plots, and has articles that discuss the limitations of graphs as well. Have you ever seen a radar, a stream, or a sunburst chart? Visit the website and learn how to make them.\n\n#Minimal code example #####\n#There are many graphs (and code) to explore on:\n#www.r-graph-gallery.com",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ten additional geoms for ggplot2</span>"
    ]
  },
  {
    "objectID": "03_ggplot2_ext.html#mosaic-plots",
    "href": "03_ggplot2_ext.html#mosaic-plots",
    "title": "3  Ten additional geoms for ggplot2",
    "section": "3.7 Mosaic plots",
    "text": "3.7 Mosaic plots\nMosaic (or spine) plots are a great way to visualize the relationship between two categorical variables. The area of each rectangle is proportional to the number of observations in each category. I used the titanic data to depict the effect of passenger’s sex on survival. Obviously, more women than men survived the accident.\n\n\n\n\n\n\n\n\n\nThe ggmosaic() package provides the corresponding geom (Jeppson, Hofmann, and Cook 2021). The package is a great tool to create mosaic plots and it is easy to use. The minimal code example shows how to create a mosaic plot with the titanic data. The product function is used to create a two-way table.\n\n#Minimal code example #####\nlibrary(ggmosaic)\n\nggplot(data = titanic) +\n  geom_mosaic(aes(x = product(Sex), \n                  fill = Survived))",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ten additional geoms for ggplot2</span>"
    ]
  },
  {
    "objectID": "03_ggplot2_ext.html#ridge-plots",
    "href": "03_ggplot2_ext.html#ridge-plots",
    "title": "3  Ten additional geoms for ggplot2",
    "section": "3.8 Ridge plots",
    "text": "3.8 Ridge plots\nA ridge plot is a great way to visualize the distribution of a numerical variable across different categories. The plot shows the density of the variable for each category. In the example plot, I used the gapminder data to visualize the distribution of life expectancy across different continents. Europe has the highest, while Africa had the lowest life expectancy. The distribution is much wider in Africa compared to other continents.\n\n\n\n\n\n\n\n\n\nThe ggridges package was developed by (wilke_ggridges_2018?) and provides many examples to create ridge plots (Wilke 2021). The package creates a ridge plot and fills the area under the curve with a gradient color. As the code from the ggridges vignette illustrates, explore how the weather (temperature) changes over a year.\n\n#Minimal code example #####\nlibrary(ggridges)\n\n#Minimal code by Claus Wilke:\nggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = Month, \n                            fill = stat(x))) +\n  geom_density_ridges_gradient(scale = 3, \n                               rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\", \n                       option = \"C\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ten additional geoms for ggplot2</span>"
    ]
  },
  {
    "objectID": "03_ggplot2_ext.html#treemaps",
    "href": "03_ggplot2_ext.html#treemaps",
    "title": "3  Ten additional geoms for ggplot2",
    "section": "3.9 Treemaps",
    "text": "3.9 Treemaps\nA treemap is a great way to visualize hierarchical data. The area of each rectangle is proportional to the observed value. Before he was banned, Donald Trump was a huge fan of Twitter and Axios collected and categorized his tweets. Some tweets were about the media, democrats, and the grand old party (GOP), with further subgroups within each category. I used this data and the treemapify package to make a treemap (Wilkins 2021). Mr. Trump tweeted a lot about “the media” and the “Democrats” in 2019.\n\n\n\n\n\n\n\n\n\nIn the example below I used the gapminder data to visualize the GDP per capita and life expectancy of European countries in 2007. The treemapify package provides the geom_treemap() function to create a treemap. The geom_treemap_text() function adds labels to the treemap.\n\n#Minimal code example #####\nlibrary(treemapify)\nlibrary(gapminder)\n\ndata &lt;- gapminder::gapminder |&gt; \n  dplyr::filter(year == 2007 & continent == \"Europe\")\n\nggplot(data, aes(area = gdpPercap, \n                 fill = lifeExp, \n                 label = country)) +\n  geom_treemap() +\n  geom_treemap_text(color = \"white\", \n                    grow = TRUE)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ten additional geoms for ggplot2</span>"
    ]
  },
  {
    "objectID": "03_ggplot2_ext.html#waffle-charts",
    "href": "03_ggplot2_ext.html#waffle-charts",
    "title": "3  Ten additional geoms for ggplot2",
    "section": "3.10 Waffle charts",
    "text": "3.10 Waffle charts\nAn alternative for a pie chart is a waffle chart. The latter depicts values across different categories and the area of each rectangle is proportional to the observed value. In case of percentages, the area of each rectangle is proportional to the percentage value. My example shows the leaky pipeline in academia. Did you know that after each transition step in higher education (e.g., graduation, Ph.D.), more men than women remain in the system? The sex ratios become skewed till the end of the academic pathway. I used a waffle chart to illustrate the leaky pipeline for Germany in 2020.\n\n\n\n\n\n\n\n\n\nThe waffle package provides the waffle() function to create a waffle chart (Rudis and Gandy 2017). The rows argument controls the number of rows in the chart. The minimal code shows how to create a waffle chart with a toy vector.\n\n#Minimal code example #####\nlibrary(waffle)\nparts &lt;- c(66, 22, 12)\n\nwaffle(parts, rows = 10)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ten additional geoms for ggplot2</span>"
    ]
  },
  {
    "objectID": "03_ggplot2_ext.html#word-clouds",
    "href": "03_ggplot2_ext.html#word-clouds",
    "title": "3  Ten additional geoms for ggplot2",
    "section": "3.11 Word clouds",
    "text": "3.11 Word clouds\nA word cloud shows the frequency of words in a text. The size of each word is proportional to its frequency. The plot shows the word cloud of a children’s book that I made with the ggwordcloud package (Le Pennec and Slowikowski 2022). Witches and wizards play a big role in this book.\n\n\n\n\n\n\n\n\n\nThe ggwordcloud package provides the geom_text_wordcloud() function to create a word cloud. The size argument controls the size of the words. The minimal code example shows how to create a word cloud with the love_words_small data.\n\n#Minimal code example by Erwan Le Pennec \nlibrary(ggwordcloud)\n#set a seed (starting point)\nset.seed(123)\n\nggplot(love_words_small, aes(label = word, \n                             size = speakers)) +\n  geom_text_wordcloud() +\n  scale_size_area(max_size = 30)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ten additional geoms for ggplot2</span>"
    ]
  },
  {
    "objectID": "03_ggplot2_ext.html#summary",
    "href": "03_ggplot2_ext.html#summary",
    "title": "3  Ten additional geoms for ggplot2",
    "section": "3.12 Summary",
    "text": "3.12 Summary\nThis blog highlighted packages to extend the possibilities of ggplot2, but there are too many to discuss them all. For example, ggtext helps to handle text (Wilke 2020); you can visualize the results of a survival analysis with survminer (Kassambara, Kosinski, and Biecek 2021); or create cool animations with gganimate (Pedersen and Robinson 2022).\nFinally, go and visit the ggplot2 website to explore more extensions.\n\n\n\n\nBrunson, Jason Cory, and Quentin D. Read. 2020. Ggalluvial: Alluvial Plots in Ggplot2. https://CRAN.R-project.org/package=ggalluvial.\n\n\nClarke, Erik, and Scott Sherrill-Mix. 2017. Ggbeeswarm: Categorical Scatter (Violin Point) Plots. https://CRAN.R-project.org/package=ggbeeswarm.\n\n\nHorst, Allison Marie, Alison Presmanes Hill, and Kristen B Gorman. 2020. “Palmerpenguins: Palmer Archipelago (Antarctica) Penguin Data.” https://doi.org/10.5281/zenodo.3960218.\n\n\nJeppson, Haley, Heike Hofmann, and Di Cook. 2021. Ggmosaic: Mosaic Plots in the Ggplot2 Framework. https://CRAN.R-project.org/package=ggmosaic.\n\n\nKahle, David, and Hadley Wickham. 2013. “Ggmap: Spatial Visualization with Ggplot2.” The R Journal 5 (1): 144–61. https://journal.r-project.org/archive/2013-1/kahle-wickham.pdf.\n\n\nKahle, David, Hadley Wickham, and Scott Jackson. 2019. Ggmap: Spatial Visualization with Ggplot2. https://CRAN.R-project.org/package=ggmap.\n\n\nKassambara, Alboukadel, Marcin Kosinski, and Przemyslaw Biecek. 2021. Survminer: Drawing Survival Curves Using Ggplot2. https://CRAN.R-project.org/package=survminer.\n\n\nLe Pennec, Erwan, and Kamil Slowikowski. 2022. Ggwordcloud: A Word Cloud Geom for Ggplot2.\n\n\nNeitmann, Thomas. 2020. Ggcharts: Shorten the Distance from Data Visualization Idea to Actual Plot. https://CRAN.R-project.org/package=ggcharts.\n\n\nPedersen, Thomas Lin, and David Robinson. 2022. Gganimate: A Grammar of Animated Graphics. https://CRAN.R-project.org/package=gganimate.\n\n\nRudis, Bob, and Dave Gandy. 2017. Waffle: Create Waffle Chart Visualizations in r. https://CRAN.R-project.org/package=waffle.\n\n\nWickham, Hadley, Winston Chang, Lionel Henry, Thomas Lin Pedersen, Kohske Takahashi, Claus Wilke, Kara Woo, Hiroaki Yutani, and Dewey Dunnington. 2022. Ggplot2: Create Elegant Data Visualisations Using the Grammar of Graphics. https://CRAN.R-project.org/package=ggplot2.\n\n\nWilke, Claus O. 2020. Ggtext: Improved Text Rendering Support for ’Ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\n———. 2021. Ggridges: Ridgeline Plots in ’Ggplot2’. https://CRAN.R-project.org/package=ggridges.\n\n\nWilkins, David. 2021. Treemapify: Draw Treemaps in ’Ggplot2’. https://CRAN.R-project.org/package=treemapify.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ten additional geoms for ggplot2</span>"
    ]
  },
  {
    "objectID": "04_gist.html",
    "href": "04_gist.html",
    "title": "4  Manage Code Snippets with GitHub Gist",
    "section": "",
    "text": "4.1 Installation\nWhy should we consider GitHub Gist for code snippets? It is a simple way to share code snippets with others. Moreover, you can embed gists in websites, blogs, and other documents. However, the best part about Gist is that your futrue self can access your code snippets from anywhere.\nFor this reason I wrote a simple R package to manage Gists. The gist package provides a set of functions to work with GitHub Gist. It allows you to copy, create, and delete gists via the GitHub API. Moreover, it comes with an R Studio addin - a shiny app - to manage your Gists.\nThis article outlines why GitHub Gist is a great tool for code snippets and how to use the gist package.\nYou can install the development version of gist like so:\ndevtools::install_github(\"edgar-treischl/gist\")\nIn order to connect with the Git Hub API, you need to provide a GitHub API token (names as: github_api) with the keyring package. Use the key_set() function to store your token safely:\n#Save GitHub API token as github_api\nkeyring::key_set(service = \"github_api\")",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Manage Code Snippets with GitHub Gist</span>"
    ]
  },
  {
    "objectID": "04_gist.html#workflow",
    "href": "04_gist.html#workflow",
    "title": "4  Manage Code Snippets with GitHub Gist",
    "section": "4.2 Workflow",
    "text": "4.2 Workflow\nThere is no need to learn how the package works, because it comes with an R Studio addin that let you manage Gists. Go to the addin menu or use the following code to open the gist app. The app shows a list with your gist files and a preview of the code. Pick a gist and copy or insert the code. Furthermore, the app has tabs to create and delete gists as well.\n\n#The gistAddin()\nlibrary(gist)\ngist::gistAddin()\n\n\n\n\n\n\nIf you want to interact via R, you can use the following functions. Create a new Gist via:\n\n#Create a gist\ngist_create(name = \"A_Test.R\", \n            code = '#Test\n            print(\"Hello world\")', \n            description = \"Test Gist\")\n\n#&gt; [1] \"TRUE\"\n\n\nGet a gist via:\n\n#gistfiles lists all files and returns names and ids\ngist_get(filename = \"A_Test.R\")\n\n#&gt; ✔ Copied A_Test.R from your GitHub account.\n\nSet the raw parameter to TRUE in case you need the raw character vector. Finally, let us delete a gist. Therefore, you need to inspect your gists to get to know the id of a gist.\n\n#gistFiles lists all files and returns names and ids\nmygists &lt;- gist::gistFiles()\nmygists |&gt; head()\n\n#&gt;                      file                               id\n#&gt; 1                A_Test.R 43ae0a38b8a408cc31b251e2b515aed4\n#&gt; 2          Create_XML.sql 0a7ec749730c674e4bbaecc2b03ddcf1\n#&gt; 3            attachment.R 0daa7241e752a4c4f77ad0085b9d7694\n#&gt; 4              blastula.R c207c4d4f35be94bf20f6c1882d622db\n#&gt; 5 blastula_render_email.R d83b171315dba56157514f75b5bc857b\n#&gt; 6                 clear.R 27a596e3c9cf3b533936e771a01d840f\n\n\nTo delete a gist, give the id the gist_delete() function.\n\n#Delete a gist\ngist::gist_delete(id = mygists$id[1])\n\n#&gt; [1] \"TRUE\"\n\n\nIn summary, consider GitHub Gist if your code snippets are scattered somewhere on your computer. The gist package provides a simple way to manage your Gists and the R Studio addin makes it easy to get started.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Manage Code Snippets with GitHub Gist</span>"
    ]
  },
  {
    "objectID": "05_cpp.html",
    "href": "05_cpp.html",
    "title": "5  C++ Basics",
    "section": "",
    "text": "5.1 Hello World\n#include &lt;Rcpp.h&gt;\nusing namespace Rcpp;\n// [[Rcpp::export]]\nNumericVector timesTwo(NumericVector x) {\n  return x * 2;\n}\ntimesTwo(42)\n\n[1] 84",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>C++ Basics</span>"
    ]
  },
  {
    "objectID": "07_GitHub.html",
    "href": "07_GitHub.html",
    "title": "7  Git(Hub): A Gentle Introduction for R Users",
    "section": "",
    "text": "7.1 Introduction\nGit is a powerful version control system to track changes in code over time. It’s an essential tool for sharing work, collaborating with others, and automating repetitive tasks. GitHub (and GitLab) are platforms built around Git that allow developers to host, share, and collaborate on projects. At its core, GitHub serves as a repository for Git-based projects.\nLearning Git can be intimidating, especially for beginners. However, R users have a head start because R packages and RStudio make it easy to work with Git and GitHub. For example, R packages like usethis and devtools provide functions to set up Git, create repositories, and share code. RStudio, on the other hand, offers a Git pane that simplifies common Git operations, such as staging, committing, and pushing changes. If you work with Code on a daily basis there is no doubt, you should consider learning Git.\nFor example: Suppose you’ve shared your code on GitHub. While others can download the code, they can also run it directly in their R console. This makes the source_url() function from the devtools package possible, which allows you to execute R code directly from a URL. The next time you update your code, your colleagues can rerun the code to get access the latest version. As the next code chunk demonstrates, pacman.R live in my GitHub account and creates a plot when sourced.\n# Link to GitHub repository\nlink &lt;- paste0(\"https://raw.githubusercontent.com/\",\n               \"edgar-treischl/edgar/refs/heads/\",\n               \"master/inst/graphs/pacman.R\")\n\n# Source the code, show the plot from the source file\ndevtools::source_url(link)\nshowplot()\nGit is an essential tool for any data scientist, and GitHub is a game-changer in many ways. This article introduces Git and GitHub to R users, focusing on how R packages and RStudio make it particularly easy to work with these tools. If you’re not an R user, don’t worry! The concepts and tools introduced here are applicable to any programming language.\nThe article is structured as follows: First, we inspect how to set up and use Git and GitHub in RStudio. Then, I’ll cover the most important Git basic with a focus on troubleshooting. Finally, I’ll introduce (GitHub) Gist, a simple way to share code snippets.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Git(Hub): A Gentle Introduction for R Users</span>"
    ]
  },
  {
    "objectID": "07_GitHub.html#getting-started",
    "href": "07_GitHub.html#getting-started",
    "title": "7  Git(Hub): A Gentle Introduction for R Users",
    "section": "7.2 Getting Started",
    "text": "7.2 Getting Started\nTo get started with Git and GitHub, there are three key steps: First, install Git on your local machine. Second, create a GitHub account. Finally, connect RStudio with GitHub.\n\n7.2.1 Install Git\nBelow are the installation instructions for different operating systems:\n\nWindows: https://git-scm.com/download/win\nOS X: https://git-scm.com/download/mac\nDebian/Ubuntu: sudo apt-get install git-core\n\nAfter installing Git, you can check if the installation was successful by typing git --version into the console. It should return the installed version if everything went well.\n\n# Go to the console and type:\ngit --version\n\ngit version 2.39.5 (Apple Git-154)\n\n\nNext, you need to introduce yourself to Git. Git needs to know your identity to track changes properly and attribute them to you. You can do this by setting your username and email address with the git config command. You can configure this directly in the console or use the usethis package, which offers additional functionality for setting up your Git environment. We’ll revisit the usethis package shortly.\n# Set your user name and email address via bash\ngit config --global user.name \"User Name\"\ngit config --global user.email \"email@adress.com\"\n\n# Set your user name and email address via R\nlibrary(usethis)\nuse_git_config(user.name = \"Jane Doe\",\n               user.email = \"jane@example.org\")\n\nTo check if the configuration was successful, type git config –global –list in your console.\n\ngit config --global --list\n\nfilter.lfs.clean=git-lfs clean -- %f\nfilter.lfs.smudge=git-lfs smudge -- %f\nfilter.lfs.process=git-lfs filter-process\nfilter.lfs.required=true\nuser.name=Edgar Treischl\nuser.email=77931249+edgar-treischl@users.noreply.github.com\ncore.excludesfile=~/.gitignore\n\n\nBefore we continue, let’s familiarize ourselves with some key Git/GitHub terminology. Git can seem a bit overwhelming at first, especially because of its technical jargon. But don’t worry—at this stage, we only need a basic understanding of the most important terms:\n\nRepository: A folder that contains all the project files.\nPush: Uploading code (files) to a Git repository.\nPull: Downloading code (files) from a Git repository.\nCommit: A snapshot of a repository at a specific point in time.\nBranch: A separate version of the repository used to test new features.\nMerge: Combining changes from two branches into one.\nMerge conflicts: Occur when two branches modify the same part of a file, and Git cannot automatically determine which version is correct.\nFork: A copy of another repository, typically used to make changes to someone else’s project.\nPull request: A way to propose changes to a repository.\n\nCertainly, pushing and pulling code, committing changes, and understanding other Git concepts may not come naturally at first. However, we’ll gain a deeper understanding by putting these concepts into practice. Let’s move on and create a free GitHub account:\n\nWindows: https://github.com/\n\nAfter creating your GitHub account, you’ll need to connect GitHub and RStudio using a personal access token (PAT). It’s important to store this PAT, as it will allow RStudio to authenticate with GitHub.\nThe usethis package makes this process easy. Using the create_github_token() function, a browser window will open, directing you to the GitHub token creation page (https://github.com/settings/tokens). GitHub provides various options for customizing your token. You can set it to expire after a certain time, restrict it to specific repositories, or limit it to certain actions. For now, simply create a token with the default settings.\n\n# The create_github_token() function will open a browser window to create a token\nusethis::create_github_token()\n\nThe set_github_pat() function from the credentials package will help you connect to GitHub and store your PAT. Run the function and paste your token into the menu that pops up.\n\n#The set_github_pat() function will store the token\ncredentials::set_github_pat()\n\nFinally, check if R Studio is connected to GitHub using the gh package. The gh_whoami() function will display your GitHub identity.\n\n# Actually, whoami will show you who you are on GitHub ...\ngh::gh_whoami()\n\n{\n  \"name\": \"Edgar Treischl\",\n  \"login\": \"edgar-treischl\",\n  \"html_url\": \"https://github.com/edgar-treischl\",\n  \"scopes\": \"gist, repo, user, workflow\",\n  \"token\": \"ghp_...Cmqg\"\n} \n\n\nIf RStudio recognizes your GitHub identity, you’re all set! The steps we just covered only need to be completed once. Now, let’s move on to using Git and GitHub in RStudio on a daily basis.\nFirst, go back to the GitHub website and create a new repository. This will be just a test repository, so don’t worry too much about the options available during setup. You can choose whether to make it public or private, add a README file (for future users), or include a license. For now, just create the repository without any additional options.\n\nAfter creating the repository, you’ll see the quick setup guide. This guide shows you how to connect your local repository to the remote repository on GitHub, but for now, we’ll connect using the https link. Simply copy the link and return to RStudio.\n\nTo connect your local repository with the remote repository on GitHub, we need to clone it. Cloning essentially means copying the remote repository to your local machine. RStudio makes this process straightforward using the Project Wizard:\n\nCreate a new project in RStudio and click “Next.”\nSelect “Version Control.”\nChoose “Git.”\nPaste the repository URL into the corresponding field to create the new project. The next image shows the final step only.\n\n\nR Studio will clone the repository, and the Git pane should appear in the upper right corner. If the pane doesn’t show up automatically, try restarting RStudio and checking your settings. The Git pane provides easy access to basic Git commands and visually displays the status of your repository. Initially, your Git pane will be empty, but as you begin working on your project, RStudio will show the differences between your local and remote repositories. The next image illustrates the Git pane after you’ve made changes to your project.\n\nFirst, create a new R script, insert some code, and save the script. The new file should appear in the Git pane, marked with a yellow question mark. This indicates that the file isn’t being tracked yet. Once you stage the file, it will be marked with a teal “A” (for added file). We’ll explore what this means shortly. As highlighted in the last image, the same happens if you modify, delete, or rename a file.\nNow that you’ve worked on your project, how do you save your changes and push them to the remote repository? After creating and saving a new file, you need to stage it. Staging tells Git to track the file. You can do this by checking the box in the Git pane. Next, you’ll add a commit message. A commit message is a short description of the changes you’ve made, and it’s good practice to write something meaningful yet concise. Once you’re satisfied with your message, click the “Commit” button to save your changes locally. Finally, you can push your changes to the remote repository on GitHub by clicking the “Push” button. The next image shows these steps in the Git pane.\n\nGit will inform you with a cryptic message if your push attempt is successful. This message includes the commit hash (which uniquely identifies each commit) and the branch to which the changes were pushed.\nTo https://github.com/your_username/your_repository.git\n   abc1234..def5678  main -&gt; main\nGo ahead and inspect your GitHub repository to confirm that the changes were successfully pushed. If the push was successful, the next section will introduce you to the most basic Git commands for working with GitHub. When you click a button in the Git pane, RStudio runs the corresponding Git commands in the background, and learning a few basic commands is all you need to effectively work with Git.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Git(Hub): A Gentle Introduction for R Users</span>"
    ]
  },
  {
    "objectID": "07_GitHub.html#basic-git-commands",
    "href": "07_GitHub.html#basic-git-commands",
    "title": "7  Git(Hub): A Gentle Introduction for R Users",
    "section": "7.3 Basic Git commands",
    "text": "7.3 Basic Git commands\nWe can skip the initial steps, as we’ve already covered how to initialize a new repository and clone it. Programmatically, you would run:\n# Initialize a new repository\ngit init &lt;your repository name&gt;\n\n# Clone a repository\ngit clone &lt;git-repo-url&gt;\nUse git branch to create a new branch, or add the --list option to view all existing branches.\n# Create a new branch\ngit branch &lt;branch-name&gt;\n\n# List all branches\ngit branch --list\nDelete a branch with git branch -d &lt;branch-name&gt;, and switch to a different branch using git checkout.\n# Delete a branch\ngit branch -d &lt;branch-name&gt;\n\n# Switch to a branch\ngit checkout &lt;branch-name&gt;\nAdd a file to the staging area with git add &lt;file&gt;, or stage all files with git add -A.\n# Add a file to the staging area\ngit add &lt;file&gt;\n\n# Add All files to the staging area\ngit add -A\nCommit changes with git commit. The -am option is a shortcut for git add -A followed by git commit -m. Push changes to the remote repository with git push &lt;remote&gt; &lt;branch-name&gt;.\n# Commit changes\ngit commit -am &lt;commit-message&gt;\n\n# Push changes to the remote rep\ngit push &lt;remote&gt; &lt;branch-name&gt;\nKeep in mind that if you’re collaborating with others, you’ll need to pull changes from the remote repository. Use the git pull command to fetch and merge changes from the remote repository into your local one. If you’re working on a branch and want to merge it with the main branch, you can use the git merge &lt;branch-name&gt; command.\n# Pull changes from the remote rep\ngit pull\n\n# Merge two branches\ngit merge &lt;branch-name&gt;\nYou might be wondering, do you need all this code if you’re happy with the Git pane? While the pane simplifies common Git operations, using Git commands gives you more control, flexibility, and the ability to manage more complex tasks. For instance, merge conflicts can occur when two branches modify the same part of a file, and Git won’t be able to automatically resolve the conflict. Git commands provide a more detailed understanding of where the conflicts are happening, which is especially useful when the conflict isn’t easy to resolve. So, it’s worth learning the commands, particularly for troubleshooting.\nUse git blame to see who changed what and when, git status to view the working tree status, and git diff to inspect the differences between commits.\n# Show who changed what and when\ngit blame file.txt\n\n# Shows the working tree status\ngit status\n\n# Shows changes between commits\ngit diff\nBe cautious when reverting or discarding changes! The git revert command creates a new commit that undoes changes from a previous commit. The git reset command resets the repository to a previous commit. And as a last resort, the git reset --hard command forcefully discards any local changes. Keep in mind, once you discard changes, there’s no way to recover them.\n# 💀💀💀 DANGER\n# Revert some existing commits\ngit revert SHA\n\n# Reset the repository to a previous commit \n# Take care: This will discard any local changes\ngit reset \n\n# Ultima ratio only\n# A \"hard reset\": forcefully discard any local changes\nBefore attempting to reset, take a look at the commit history in RStudio. The commit history provides a detailed view of what changes were made and when. It’s a powerful tool for inspecting changes, identifying issues, and reverting changes if necessary.\n\nFinally, here’s one last tool to consider: GitHub Gist. Gist is a service provided by GitHub that allows you to share and store code snippets, text, or other types of files. It not only enables you to share code without creating a full repository, but also lets you embed code snippets in a blog post or website. Gist is an excellent tool for saving your own code snippets that might otherwise get lost or clutter your workspace.\nI even created an R package that allows you to work with GitHub Gist natively from R. The gist package provides a set of functions to manage your GitHub Gists, allowing you to copy, create, and delete gists via the GitHub API. Moreover, it comes with an RStudio addin that allows you to easily create, delete, or copy one of your existing Gists with the click of a button. The next image shows the Gist addin in action.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Git(Hub): A Gentle Introduction for R Users</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Allaire, JJ, Yihui Xie, Jonathan McPherson, Javier Luraschi, Kevin\nUshey, Aron Atkins, Hadley Wickham, Joe Cheng, Winston Chang, and\nRichard Iannone. 2022. Rmarkdown: Dynamic Documents for r. https://CRAN.R-project.org/package=rmarkdown.\n\n\nBrunson, Jason Cory, and Quentin D. Read. 2020. Ggalluvial: Alluvial\nPlots in Ggplot2. https://CRAN.R-project.org/package=ggalluvial.\n\n\nClarke, Erik, and Scott Sherrill-Mix. 2017. Ggbeeswarm: Categorical\nScatter (Violin Point) Plots. https://CRAN.R-project.org/package=ggbeeswarm.\n\n\nCsárdi, Gábor. 2022. “Keyring: Access the System Credential Store\nfrom r.” https://CRAN.R-project.org/package=keyring.\n\n\nGrothendieck, G. 2017. “Sqldf: Manipulate r Data Frames Using\nSQL.” https://CRAN.R-project.org/package=sqldf.\n\n\nGrün, Bettina, and Achim Zeileis. 2009. “Automatic Generation of\nExams in r” 29. https://doi.org/10.18637/jss.v029.i10.\n\n\nHorst, Allison Marie, Alison Presmanes Hill, and Kristen B Gorman. 2020.\n“Palmerpenguins: Palmer Archipelago (Antarctica) Penguin\nData.” https://doi.org/10.5281/zenodo.3960218.\n\n\nJeppson, Haley, Heike Hofmann, and Di Cook. 2021. Ggmosaic: Mosaic\nPlots in the Ggplot2 Framework. https://CRAN.R-project.org/package=ggmosaic.\n\n\nKahle, David, and Hadley Wickham. 2013. “Ggmap: Spatial\nVisualization with Ggplot2.” The R Journal 5 (1):\n144–61. https://journal.r-project.org/archive/2013-1/kahle-wickham.pdf.\n\n\nKahle, David, Hadley Wickham, and Scott Jackson. 2019. Ggmap:\nSpatial Visualization with Ggplot2. https://CRAN.R-project.org/package=ggmap.\n\n\nKassambara, Alboukadel, Marcin Kosinski, and Przemyslaw Biecek. 2021.\nSurvminer: Drawing Survival Curves Using Ggplot2. https://CRAN.R-project.org/package=survminer.\n\n\nLe Pennec, Erwan, and Kamil Slowikowski. 2022. Ggwordcloud: A Word\nCloud Geom for Ggplot2.\n\n\nMüller, Kirill, Hadley Wickham, David A. James, and Seth Falcon. 2022.\nRSQLite: SQLite Interface for r. https://CRAN.R-project.org/package=RSQLite.\n\n\nNeitmann, Thomas. 2020. Ggcharts: Shorten the Distance from Data\nVisualization Idea to Actual Plot. https://CRAN.R-project.org/package=ggcharts.\n\n\nPedersen, Thomas Lin, and David Robinson. 2022. Gganimate: A Grammar\nof Animated Graphics. https://CRAN.R-project.org/package=gganimate.\n\n\nR Special Interest Group on Databases (R-SIG-DB), Hadley Wickham, and\nKirill Müller. 2022. DBI: R Database Interface. https://CRAN.R-project.org/package=DBI.\n\n\nRudis, Bob, and Dave Gandy. 2017. Waffle: Create Waffle Chart\nVisualizations in r. https://CRAN.R-project.org/package=waffle.\n\n\nUshey, Kevin, JJ Allaire, Hadley Wickham, and Gary Ritchie. 2023.\n“Rstudioapi: Safely Access the RStudio API.” https://CRAN.R-project.org/package=rstudioapi.\n\n\nWickham, Hadley. 2022. Tidyverse: Easily Install and Load the\nTidyverse. https://CRAN.R-project.org/package=tidyverse.\n\n\nWickham, Hadley, Winston Chang, Lionel Henry, Thomas Lin Pedersen,\nKohske Takahashi, Claus Wilke, Kara Woo, Hiroaki Yutani, and Dewey\nDunnington. 2022. Ggplot2: Create Elegant Data Visualisations Using\nthe Grammar of Graphics. https://CRAN.R-project.org/package=ggplot2.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis\nVaughan. 2023. “Dplyr: A Grammar of Data Manipulation.” https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, Maximilian Girlich, and Edgar Ruiz. 2022. Dbplyr: A\nDplyr Back End for Databases. https://CRAN.R-project.org/package=dbplyr.\n\n\nWilke, Claus O. 2020. Ggtext: Improved Text Rendering Support for\n’Ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\n———. 2021. Ggridges: Ridgeline Plots in ’Ggplot2’. https://CRAN.R-project.org/package=ggridges.\n\n\nWilkins, David. 2021. Treemapify: Draw Treemaps in ’Ggplot2’.\nhttps://CRAN.R-project.org/package=treemapify.",
    "crumbs": [
      "References"
    ]
  }
]