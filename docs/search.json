[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Medium Articles",
    "section": "",
    "text": "Preface\nThis website collects my Medium articles. I write about a variety of topics, including software development, data science, and machine learning. I also write about my personal experiences and thoughts. I hope you enjoy reading my articles. If you have any questions or comments, please feel free to contact me. Thank you for visiting my website.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "01_scan.html",
    "href": "01_scan.html",
    "title": "1  Create, scan, and correct exams with R",
    "section": "",
    "text": "1.1 The R exams package\nR can be used to create, scan, and correct student exams. This blog introduces the R exams package and shows how the approach works based on demo exam files that come with the package. I demonstrate how R scans exam images, extract answers from single or multiple choice questions, and correct them automatically. Next, I underline typical next steps that are related to this kind of work and how they are implemented in R (e.g., create a document with the exams results). Finally, I highlight how you can create your own exam question. This blog shows how the package works to encourage people with little R experience to use the exams package.\nYou can download this article and the source code from my GitHub repository.\nAs university instructors, we are creating exams and we use often multiple-choice questions to assess the knowledge of our students. I don’t know how many times I have manually corrected an exam which is why this blog gives a short introduction and shows why you should consider the R exams package for single or multiple choice exams (Grün and Zeileis 2009). The package provides features to automate the entire process, from generating the exam up to assigning grades.\nFirst, why should you consider R for exams? The exams package helps you to generate, scan, and assess the exam. It helps you to create a scan sheet that your students fill out in the exam. After the exam, you can use a regular copy machine to scan the sheets. The exams package scans those images, assess students’ answers, and provides documents with the results instantly. That is an awesome reason. Furthermore, it helps you to reduce mistakes because students’ answers are no longer corrected manually and it returns a HTML file for each participant that shows the scan sheet, the given and the correct answers, and how many points the person has earned.\nIn order to use exams, we need to setup a folder that contains all the question of the exam, we need the images of the exam to extract the information and we have to assess the students’ answers. Give it a try and learn how each step works before you setup your own exam, because the exams package comes with a nice tutorial and all necessary demo files to create and scan an exam. The next subsections give a quick summary of the demonstration from the website, but you can find a step-by-step guide on the R exams website website as well.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Create, scan, and correct exams with R</span>"
    ]
  },
  {
    "objectID": "01_scan.html#the-demo-from-the-r-exams-package",
    "href": "01_scan.html#the-demo-from-the-r-exams-package",
    "title": "1  Create, scan, and correct exams with R",
    "section": "1.2 The demo from the R exams package",
    "text": "1.2 The demo from the R exams package\nBefore we can start to create the exam, we need exercises or exam questions and the package provides a list of exercises files that we can download on the website. Make a new folder where all the files will be stored. Copy the exercises from the website and save them in a new folder named exercises. Next, create a new R script, install and load the library.\n\n#install.packages(\"exams\")\nlibrary(exams)\n\nAs a first step, we need to decide which questions should be included in the exam. Therefore, we create a list that stores questions names. In the last section, we will see how to create our own questions, but as first step it is fine if we use the questions provided by the exams package. As the next output shows, I created a list (exercises_exam) with several example questions:\n\n#setup a list of (example) exam questions\nexercises_exam &lt;- list(\n  \"tstat2.Rnw\",\n  \"ttest.Rnw\",\n  \"relfreq.Rnw\",\n  \"anova.Rnw\",\n  c(\"boxplots.Rnw\", \"scatterplot.Rnw\"),\n  \"cholesky.Rnw\"\n)\n\nSecond, I use this list to create the exam with the help of the exams2nops() function. The latter creates a PDF file based on the exercises_exam list and adds the scan sheet as first page. As the exams package outlines, you may want to set a seed to reproduce the results and we assign the exam as test_exam.\n\n#Create a PDF for the exam\nset.seed(403)\ntest_exam &lt;- exams2nops(exercises_exam, \n                  dir = \"nops_pdf\", \n                  name = \"demo\", date = \"2015-07-29\",\n                  points = c(1, 1, 1, 2, 2, 3),\n                  n = 2)\n\nThere are several options how to adjust the exam and you may check the documentation to adjust the minimal code for your own purposes. As the minimal code shows, we need to provide the directory (dir) where the pdf will be stored (here: nops_pdf), a name and the date of the exam; and I created two different versions of the exam (with randomized order of the questions), but you can create more versions if you want to. In addition to the pdf files, the exams2nops() function saves a .rds file in the directory which contains all of the meta data about the exam (e.g. solutions). We will see where this information is coming from in the last section.\nThe package provides everything that is needed for a test run and includes also test exam images. The next code snippet saves two example scan files as scan_image. We can use the two files to see how we can evaluate images and scan an exam.\n\n#Use example images to check out how it works\nscan_image &lt;- dir(system.file(\"nops\", package = \"exams\"), \n           pattern = \"nops_scan\",\n           full.names = TRUE)\n\nAll of the scan images must be stored in one directory. Create a new directory with dir.create(\"nops_scan\") where the scan files will be saved and the second line of code copies the demo files scan_image into the nops_scan folder with file.copy().\n\n#Create a folder and copy images\ndir.create(\"nops_scan\")\nfile.copy(scan_image, to = \"nops_scan\")\n\nAfter you run this code chunk, two fake scan images appear in your folder, one from Ambi Dexter and another one from Jane Doe, as the next figure illustrates.\n\nAfter we have prepared all the essential steps, we use the nops_scan() function to scan the images. It trims and rotates the files and extracts the information from the PNG.\n\n#Scan images\nnops_scan(dir = \"nops_scan\")\n\nHave a look in your directory. The nops_scan() function saves the result as a archive, which includes the png files as well as a text file with the extracted information.\nBefore we can finally evaluate the results, we need a list with the information of our students to match them with the results of the exam. The minimal example gives you a code snippet to create a csv file that contains the information about the two fake students from the demo.\n\n#Who participates the exam? Load data or use example data \nwrite.table(data.frame(\n  registration = c(\"1501090\", \"9901071\"),\n  name = c(\"Jane Doe\", \"Ambi Dexter\"),\n  id = c(\"jane_doe\", \"ambi_dexter\")), \n  file = \"Exam-2015-07-29.csv\", sep = \";\", quote = FALSE, row.names = FALSE)\n\nFinally, we can use the nops_eval() function to evaluate the scanned images. The register points to the students’ matching list, solutions points to the meta data of the exam, scans provides the directory and name of the scan results, eval determines how the results are evaluated (e.g. do we give partial points), and interactive gives information whether errors should be handled interactively or not. Check out the documentation of nops_eval() for more information.\n\n#Extract/Eval information from images\nexam_results &lt;- nops_eval(\n  register = \"Exam-2015-07-29.csv\",\n  solutions = \"nops_pdf/demo.rds\",\n  scans = Sys.glob(\"nops_scan/nops_scan_*.zip\"),\n  eval = exams_eval(partial = FALSE, negative = FALSE),\n  interactive = TRUE\n)\n\nAnyway, the nops_eval() returns a data frame that contains the answers, solutions, and given points for each student!\n\n#Inspect results\nexam_results\n\n\nCheckout your folder. The nops_eval() function has already exported the exam file and it created an archive that contains a short summary document of the exam results for each student. As the next figure shows, it displays the meta information of your students, an assessment of each question, and the image of the scan sheet used to extract the information. Thus, you are really prepared if your students show up to review the exam.\n\nThus, the exams package reduces a lot of pain when it comes to correct exams and I really hope, that I have convinced you that you can handle the discussed steps, even if you have limited experience using R. To boost the popularity of the package, and to convince you that you should stick to R for the next steps as well, the next section shows you how can use R to prepare the data and automate the process to communicate the exam results. Sure, you can use any software to finalize the data, but R gives you some nice features to automate this process and you can even use R to make a summary document for your students without much effort. Unfortunately, this implies that I assume in the next section that you have basic R knowledge.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Create, scan, and correct exams with R</span>"
    ]
  },
  {
    "objectID": "01_scan.html#r-is-your-exam-friend",
    "href": "01_scan.html#r-is-your-exam-friend",
    "title": "1  Create, scan, and correct exams with R",
    "section": "1.3 R is your exam friend",
    "text": "1.3 R is your exam friend\nHow do we communicate the results of the exam and how can we automate this process? The data is saved as nops_eval.csv and we can use R to wrangle the exam data, prepare a final list with the results (a list to enter grades in the educational system), and to communicate the exam results.\nObviously, the exam data is already loaded, but we have to import the data if we want to provide a short summary for the participants or if we want to rerun the data management steps. Thus, use the readr package to import the data and the tidyverse approach for data wrangling (Wickham 2022). If you are not familiar with loading data in R, import the data with the import data function in RStudio. It gives you a preview of the data, shows you the corresponding packages and the code to import the data. As the following code snippet shows, you can read a delimited file (including csv & tsv) with the read_delim() function and we have to tweak the delimiters, because our file contains semicolons instead of commas to separate values.\n\n#Load data\nlibrary(readr)\nexam_df &lt;- read_delim(\"nops_eval.csv\", \n                        \";\", escape_double = FALSE, trim_ws = TRUE)\n\nNext, I exclude all variables which are not longer necessary for the report after importing that data. The dplyr package gives a lot handy functions to work with data and the package is included in the tidyverse package (Wickham et al. 2023). We can use the select() function to make a narrow data frame with an ID variable (register number) and the points variable from the exam data only. I generated some fake data to illustrate this process, but the code shows you furthermore how you can save a new data frame with the selected variables:\n\n#Fake example data\nlibrary(tidyverse)\nexam_df &lt;- tribble(\n  ~ID, ~points,\n   1, 57,\n   2, 60,\n   3, 84,\n   4, 45,\n   5, 82\n)\n\nexam_df &lt;- exam_df  %&gt;% \n  select(ID, points)\nexam_df\n\n# A tibble: 5 × 2\n     ID points\n  &lt;dbl&gt;  &lt;dbl&gt;\n1     1     57\n2     2     60\n3     3     84\n4     4     45\n5     5     82\n\n\nAgain, the exam package makes our life very easy since there is not much to do which is why I try to encourage people to use R even if you have little experience using it. As the next code chunk illustrates, we have to generate a new variable that stores the grade depending on the points people have achieved. Use mutate() to extend the data frame and the case_when() function assigns grades in accordance to the points of the exam. I decided that grade level goes from 100 to 50 points with a range of 5 points for each grade level, but that is not the important point here. The case_when() function checks whether the condition (e.g. points &gt;= 95 ~ 1.0) is fulfilled and assigns the corresponding grade if that’s the case. Let’s see how it works:\n\n#Give grades according to points\nexam_df &lt;- exam_df %&gt;% \n  mutate(\n    grade = (\n      case_when(\n        points &gt;= 95 ~ 1.0,\n        points &gt;= 90 ~ 1.3,\n        points &gt;= 85 ~ 1.7,\n        points &gt;= 80 ~ 2.0,\n        points &gt;= 75 ~ 2.3,\n        points &gt;= 70 ~ 2.7,\n        points &gt;= 65 ~ 3.0,\n        points &gt;= 60 ~ 3.3,\n        points &gt;= 55 ~ 3.7,\n        points &gt;= 50 ~ 4.0,\n        points &lt;= 49 ~ 5.0\n      )\n    )\n  )\n\nexam_df\n\n# A tibble: 5 × 3\n     ID points grade\n  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1     1     57   3.7\n2     2     60   3.3\n3     3     84   2  \n4     4     45   5  \n5     5     82   2  \n\n\nAs the output shows, Person 1 has 57 points and gets the grade 3.7 (German grading system); person 4 gets the grade 5 because he/she has achieved less than 50, and so on. Please check each grade level to make sure that there are no mistakes, no typos, or any other problems.\nThe next steps depend on how you have to enter the grades in your higher educational system. For instance, I need a sorted list and the grades multiplied by 100 at my university. Nothing easier than that, use mutate() again to extend our data frame with an additional grade and use arrange() to sort the data.\n\n#Arrange and check if data preparation steps really worked\nexam_df %&gt;% \n  mutate(grade_system = grade * 100) %&gt;%\n  arrange(ID)\n\n# A tibble: 5 × 4\n     ID points grade grade_system\n  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;\n1     1     57   3.7          370\n2     2     60   3.3          330\n3     3     84   2            200\n4     4     45   5            500\n5     5     82   2            200\n\n\nFinally, I need to match the exam list with a list of students who have actually registered for the exam, but some did not show up in the exam. This step also depends on what your institution wants from you, which makes it hard for me to give you any useful advice. You may want to check out how to merge data (in my case I used a left_join()); after I merged the data, I save the final results with the readr package, for example, as a csv file.\n\n#In case you need to save your results\nwrite_csv(final_results, \"final_results.csv\")\n\nThus, you can create, scan and correct exams even if you have only limited knowledge about R, but I know from my own experience that the start can be tricky and we all need sometimes an incentive.\nI guess reducing mistakes when correct exams is already an huge incentive, but you can also use R to generate a small report for your students. You may want to check out rmarkdown which let you easily create different files (pdf, html, word) and I have a standard document for my students that contains a table as well as a histogram that depicts the exam grades (Allaire et al. 2022). The next console shows the code to generate such a histogram with the help of the ggplot2 package (Wickham et al. 2022).\n\n#Inspect the results visually\nmean_grade &lt;- exam_df %&gt;% \n  pull(grade) %&gt;% \n  mean() %&gt;% \n  round(2)\n\n#Plot it\nggplot(exam_df, aes(x=grade)) +\n  geom_histogram(colour=\"black\", fill=\"white\", bins = 11)+\n  geom_vline(xintercept=mean_grade, size=1.5, color=\"red\")+\n  geom_text(aes(x=mean_grade+0.5, label=paste0(\"Mean\\n\",mean_grade), y=8))+\n  theme_minimal(base_size = 14)\n\n\n\n\n\n\n\n\nThe ggplot2 package, rmarkdown, r-exam, maybe you feel a lit bit overwhelmed depending on your background. I just wanted to outline the advantages if we create all steps in the same environment, and R gives you the possibilities to do all essential steps when it comes to exams. Moreover, it is very easy to learn rmarkdown or ggplot2 in case you have never heard of it before. I hope that the code examples give you a start how to apply it on your own. You could even have my own RMarkdown template, but RStudio comes with several rmarkdown templates and if you copy the code from above, you have essentially the same as I use.\nFrom my opinion there is only one thing left for me to do. You have to create your own exercises before you can think of using R for your exams.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Create, scan, and correct exams with R</span>"
    ]
  },
  {
    "objectID": "01_scan.html#create-your-own-exercises",
    "href": "01_scan.html#create-your-own-exercises",
    "title": "1  Create, scan, and correct exams with R",
    "section": "1.4 Create your own exercises",
    "text": "1.4 Create your own exercises\nThe next output shows you an example of an exercise. The exercises need to be available as a Markdown or a RMarkdown file. Obviously, another good reason why you want to learn more about RMarkdown. Anyway, even if you are not familiar with both, creating new exercises is easy and the structure of the exercises is not complicated.\nQuestion\n========\nWhat is the question?\n\nAnswerlist\n----------\n\n* A\n* B\n* C\n* D\n\nSolution\n========\nA and C\n\nAnswerlist\n----------\n* True\n* False\n* True\n* False\n\nMeta-information\n================\nexname: question1\nextype: mchoice\nexsolution: 1010\nexshuffle: TRUE\nI don’t think there is much to say how to provide a question, answerlist or the solutions. So, let’s have a look at the meta-information at the end of the exercise. In this section you have to outline whether you use a single (schoice) or multiple choice (mchoice); exsolution points to the binary string code for the solutions, here A and C are right which leads to 1010. Ultimately, you can decide whether the answers of the questions is shuffled or not.\nThe R exams package has much more to offer than I could possibly show you. I just tried to give a quick summary how R can be used for exams. Visit the R exams website for tutorials, the dynamic exercises, or e-learning tests. But most of all I hope that I could convince some people that learning how to create, scan, and correct exams with R is no magic at all.\n\n\n\n\nAllaire, JJ, Yihui Xie, Jonathan McPherson, Javier Luraschi, Kevin Ushey, Aron Atkins, Hadley Wickham, Joe Cheng, Winston Chang, and Richard Iannone. 2022. Rmarkdown: Dynamic Documents for r. https://CRAN.R-project.org/package=rmarkdown.\n\n\nGrün, Bettina, and Achim Zeileis. 2009. “Automatic Generation of Exams in r” 29. https://doi.org/10.18637/jss.v029.i10.\n\n\nWickham, Hadley. 2022. Tidyverse: Easily Install and Load the Tidyverse. https://CRAN.R-project.org/package=tidyverse.\n\n\nWickham, Hadley, Winston Chang, Lionel Henry, Thomas Lin Pedersen, Kohske Takahashi, Claus Wilke, Kara Woo, Hiroaki Yutani, and Dewey Dunnington. 2022. Ggplot2: Create Elegant Data Visualisations Using the Grammar of Graphics. https://CRAN.R-project.org/package=ggplot2.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. “Dplyr: A Grammar of Data Manipulation.” https://CRAN.R-project.org/package=dplyr.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Create, scan, and correct exams with R</span>"
    ]
  },
  {
    "objectID": "02_master_sql.html",
    "href": "02_master_sql.html",
    "title": "2  Master SQL with R",
    "section": "",
    "text": "2.1 Run SQL queries from R\nThis article briefly introduces R packages to master SQL. I will not introduce SQL nor all kind of R packages that are helpful to work with SQL; instead I will focus on packages that support us to learn SQL. First, I show that there is no need to install software, create databases, or get familiar with cloud applications in the beginning. You can focus on and run SQL queries from R with no further ado. Moreover, we will connect to a database and see why especially the RSQLite package helps us in the first steps. Second, I introduce the dbplyr package which let us combine our R and SQL skills. Finally, I highlight how a document with SQL code and output can be generated from R to summarize our (SQL) knowledge and progress.\nYou can download this article and the source code from my GitHub repository.\nMany books and courses introduces SQL and they outline in depth what SQL (structured query language) is. A lot of them go beyond this step, they start to introduce different databases backends (e.g., MySQL, MariaDB), CLI commands to interact with databases, and they show how to setup software or at least introduce a web interface to interact with a database.\nCertainly, these topics increase our understanding, but this seems a lot of effort considering your first goal is to familiarize yourself with SQL. We need to practice SQL and the described steps make the learning curve pretty steep. Fortunately, for R users there is no need to install software or create a database to run your first queries. Consider the next console with a simple SQL code snippet. It illustrates that we often start with a select step since we need to retrieve data from the database. We select one, several, or all columns (*) from the table. Later I’ll show you that we can use R and translate R code into SQL, so keep this simple SQL snippet in mind:\n--Example SQL Code\nSELECT var FROM data;\nIn further steps we may learn how to filter the data and set a condition (in SQL we apply a WHERE clause); we learn how to count (COUNT) cases, or do some basic calculations such as calculating the mean (AVG). You can write and run all of these queries without leaving R. Let’s keep it simple. Suppose we want to learn how to select a variable and calculate the mean:\nSELECT AVG(var) FROM data;\nThe sqldf package let us apply SQL code snippets to a data frame (Grothendieck 2017). You can build your SQL skills and follow a course without a large setup, without our own database, or any cloud solution in the beginning. Install the package (via install.packages) and write your first queries from R. How about the mean consumption of cars with the implemented mtcars data:\n#Run SQL code from R\nlibrary(sqldf)\nsqldf('SELECT AVG(mpg) FROM mtcars;')\n\n#&gt;   AVG(mpg)\n#&gt; 1 20.09062\nThe sqldf package makes it very convenient to run a few SQL snippets and the package outlines how we interact with different SQL databases in its documentation: ” sqldf() transparently sets up a database, imports the data frames into that database, performs the SQL select or other statement and returns the result using a heuristic to determine which class to assign to each column of the returned data frame” (Grothendieck 2017).\nAgain, there is no need to establish a real database in the beginning, we can make use of the local memory to simulate a database, save a table (data frame) and run SQL commands directly as a code chunk from the R script exactly as the sqldf package does. The RSQLite package helps us with this task, it creates the SQLite database on your local machine (Müller et al. 2022). With this approach, it is almost like if we work with a real database, but it is still very convenient for beginners. To do so, we need to establish a connection to the database and this code chunk will also work as a template in the near future when you switch from the local to the real database.\nHow do we connect R with a database? Use the DBI package to connect to many different databases (R Special Interest Group on Databases (R-SIG-DB), Wickham, and Müller 2022). In a nutshell, we need to establish a connection (con) with the dbConnect() function. This implies that we need to pick a driver (drv) to connect to a specific database (e.g., RMariaDB::MariaDB() for MariaDB; or RSQLServer::SQLServer for Postgres, etc.); furthermore, we need to provide the properties needed to get access to the database (e.g., host, username, etc.).\nThe DBI package gives us the code to illustrate this step with a guest account for a MariaDB database.\n#Establish a connection\nlibrary(DBI)\n\ncon &lt;- dbConnect(\n  drv = RMariaDB::MariaDB(),\n  dbname = \"sakila\",\n  host = \"relational.fit.cvut.cz\",\n  port = 3306,\n  username = \"guest\",\n  password = \"relational\"\n)\nAfter we made the connection, check if the approach worked. The dbListTables() functions lists all available tables of the connected database.\n#List all available tables/data\ndbListTables(con)\n#  [1] \"actor\"         \"address\"       \"category\"     \n#  [4] \"city\"          \"country\"       \"customer\"     \n#  [7] \"film\"          \"film_actor\"    \"film_category\"\n# [10] \"film_text\"     \"inventory\"     \"language\"     \n# [13] \"payment\"       \"rental\"        \"staff\"        \n# [16] \"store\"\nKeep in mind that we do not want to share sensitive information such as the user name or password in the code. Use the askForPassword() function from the rstudioapi package (Ushey et al. 2023). It forces us to insert the password each time we connect. Or use the keyring package to save the key savely in your environment and not in the code (Csárdi 2022). Irrespective of the used approach, we connect to the database, retrieve and wrangle data, and finally disconnect before we can go on.\n#Disconnect after have finished the job\ndbDisconnect(con)\nI claimed that we can run this step without having access to a database. That’s where the RSQLite package comes into play. The SQLite() function creates the SQLite database on your local machine if you use :memory: as database name (dbname).\n# Create in-memory RSQLite database\ncon &lt;- dbConnect(drv = RSQLite::SQLite(), \n                 dbname = \":memory:\")\nThis creates an empty database which is why we need to insert a table into the local database first.\n#Write a table into the data base\ndbWriteTable(conn = con, \n             name = \"mtcars\", \n             value = mtcars)\nThe dbSendQuery() function let you sent SQL queries to the connected database, dbFetch shows the result, and we can clear the result after we have finished.\n#Send queries to the local database\nresult_DB &lt;- dbSendQuery(con, \"SELECT AVG(mpg) FROM mtcars;\")\ndbFetch(result_DB)\n\n#&gt;   AVG(mpg)\n#&gt; 1 20.09062\n\ndbClearResult(result_DB)\nSuch R packages increases our learning curve substantially, since we can create a database and write SQL code without any other equipment than our local machine. In addition, the dbplyr package will help us to combine our R skills with SQL, it even translate R into SQL.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Master SQL with R</span>"
    ]
  },
  {
    "objectID": "02_master_sql.html#the-dbplyr-package",
    "href": "02_master_sql.html#the-dbplyr-package",
    "title": "2  Master SQL with R",
    "section": "2.2 The dbplyr package",
    "text": "2.2 The dbplyr package\nAs outlined on the package website: “dbplyr is the database backend for dplyr (Wickham, Girlich, and Ruiz 2022). It allows you to use remote database tables as if they are in-memory data frames by automatically converting dplyr code into SQL.” Thus, we can apply common dplyr verbs to SQL databases. First, we need to create a table from a database with the tbl() function.\n\n#Create a table from the database\nlibrary(dplyr)\nlibrary(dbplyr)\n\nmtcars_db &lt;- tbl(con, \"mtcars\")\n\nLet us go back to example SQL code snippet. Suppose we didn’t know how to select and calculate the mean in SQL. There are several ways to calculate it with R, but the tidyverse approach is not difficult (Wickham 2022); and it let us apply our dplyr knowledge thanks to the dbplyr package. The summarise() function collapses the data and we get the mean() by including it in the latter step, however, only if we run the code locally.\n\n#Get mean with dplyr (locally)\nmtcars |&gt; \n  summarise(mean_mpg = mean(mpg))\n\n#&gt;   mean_mpg\n#&gt; 1 20.09062\n\n\nIn order to apply this step in our database, we must assign the data manipulation steps (here as summary) and we must execute the query to retrieve results via the collect() function.\n\n#Get mean with dbplyr\nsummary &lt;- mtcars_db |&gt; \n  summarise(mean_mpg = mean(mpg))\n\n#Collect (execute and retrieve) the result from the db\nsummary |&gt;  collect()\n\n#&gt; # A tibble: 1 × 1\n#&gt;   mean_mpg\n#&gt;      &lt;dbl&gt;\n#&gt; 1     20.1\n\n\nWhat is happening under the hood? How can we apply R code to SQL? The package has a show_query() function which shows the underlying SQL code that we sent to the database.\n\n#Inspect SQL query\nsummary |&gt;  show_query()\n\n#&gt; &lt;SQL&gt;\n#&gt; SELECT AVG(`mpg`) AS `mean_mpg`\n#&gt; FROM `mtcars`\n\n\nThe packages has more to offer than I possibly can outline. For example, translate_sql() let you translate SQL code. This may help with your learning curve and it also highlights that there are different SQL dialects depending on the database you work with. Suppose to need to clean data. How can we manipulate strings to lower case in SQL? In R we may use the tolower() function:\n\n#tolower returns strings in lower case\ntolower(\"HeLLo WoRld\")\n\n#&gt; [1] \"hello world\"\n\n\nThe translate_sql() function translate it to SQL and we can see differences between SQL dialects such as SQLite and Access (LOWER and LCASE) if we simulate different engines (e.g., simulate_sqlite).\n\n#Translate with different SQL engines\ntranslate_sql(tolower(\"HeLLo WoRld\"), con = simulate_sqlite())\n\n#&gt; &lt;SQL&gt; LOWER('HeLLo WoRld')\n\ntranslate_sql(tolower(\"HeLLo WoRld\"), con = simulate_access())\n\n#&gt; &lt;SQL&gt; LCASE('HeLLo WoRld')\n\n\nGo the website to learn more about dbplyr; however, I have one last one last advice for the road.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Master SQL with R</span>"
    ]
  },
  {
    "objectID": "02_master_sql.html#document-sql-with-rmarkdown-and-quarto",
    "href": "02_master_sql.html#document-sql-with-rmarkdown-and-quarto",
    "title": "2  Master SQL with R",
    "section": "2.3 Document SQL with Rmarkdown and Quarto",
    "text": "2.3 Document SQL with Rmarkdown and Quarto\nIf I do not work with a language on a regular base, I forget how it works instantly. Thus, code documentation is an important issue. In R we create documents with rmarkdown, but we can also include different languages - including SQL - in an rmarkdown or a Quarto document. Go the rmarkdown website if have never created documents with R, because we can create a document with text, (SQL) code, and the output to summarize what you have achieved so far. Moreover, you can be sure that the code contains no mistake since the code runs when the document is created.\nSay we want to document the SQL code from the beginning:\n\n--Example SQL Code\nSELECT AVG(mpg) FROM mtcars;\n\n\n1 records\n\n\nAVG(mpg)\n\n\n\n\n20.09062\n\n\n\n\n\nFirst, you need to create the connection to the database. Create a new rmarkdown document and insert the code to create a connection inside the setup-chunk. Second, insert a code chunk into the document, but this time a SQL code chunk and point to the database via the connection chunk-option. This makes it possible to run the SQL code and it returns the output as result. The next code shows how such code chunk looks like in an R Markdown document:\n\n\n```{sql connection=con}\n--Example SQL Code\nSELECT AVG(mpg) FROM mtcars;\n```\n\n\nI hope you find the discussed tips helpful, at least, I missed them when I started to learn SQL.\n\n\n\n\nCsárdi, Gábor. 2022. “Keyring: Access the System Credential Store from r.” https://CRAN.R-project.org/package=keyring.\n\n\nGrothendieck, G. 2017. “Sqldf: Manipulate r Data Frames Using SQL.” https://CRAN.R-project.org/package=sqldf.\n\n\nMüller, Kirill, Hadley Wickham, David A. James, and Seth Falcon. 2022. RSQLite: SQLite Interface for r. https://CRAN.R-project.org/package=RSQLite.\n\n\nR Special Interest Group on Databases (R-SIG-DB), Hadley Wickham, and Kirill Müller. 2022. DBI: R Database Interface. https://CRAN.R-project.org/package=DBI.\n\n\nUshey, Kevin, JJ Allaire, Hadley Wickham, and Gary Ritchie. 2023. “Rstudioapi: Safely Access the RStudio API.” https://CRAN.R-project.org/package=rstudioapi.\n\n\nWickham, Hadley. 2022. Tidyverse: Easily Install and Load the Tidyverse. https://CRAN.R-project.org/package=tidyverse.\n\n\nWickham, Hadley, Maximilian Girlich, and Edgar Ruiz. 2022. Dbplyr: A Dplyr Back End for Databases. https://CRAN.R-project.org/package=dbplyr.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Master SQL with R</span>"
    ]
  },
  {
    "objectID": "03_ggplot2_ext.html",
    "href": "03_ggplot2_ext.html",
    "title": "3  Ten additional geoms for ggplot2",
    "section": "",
    "text": "3.1 Alluvial\nThe ggplot2 package is awesome to create visualizations. It offers a wide range of possibilities to create a lot visualizations, it even lets you create visualizations from the ground. Moreover, there are plenty of ggplot2 extensions packages: ggplot2 extensions are packages that provide additional geoms, stats, scales, and themes to ggplot2. These packages extend the possibilities of ggplot2.\nI introduce in this article ten packages that provide an additional geom. (1) I describe each visualization briefly. (2) I show an example graph. (3) I provide a minimal code snippet to recreate such a graph with implemented data.\nBy relying on implemented data, you can easily recreate the graph without the need download or prepare data. The minimal code snippets are a great starting point to explore the possibilities of the ggplot2 extension packages.\nAlluvial diagrams depict the flow of data between different categories. The width of the lines is proportional to the number of observations that flow from one category to another. For example, I used official data from German School Departments to depict the change of school types (downward and upward mobility) within a given year. As the plot shows, most pupils change to a lower school type and in consequence downward mobility is larger in Germany.\nThe ggalluvial package has implemented the geom_alluvium() and geom_stratum() functions to create alluvial plots (Brunson and Read 2020). The geom_alluvium() function creates the flow of data between categories, while the geom_stratum() function adds the categories to the plot. The minimal code example shows how to create an alluvial plot with the titanic data. Provide the data in a wide format.\n#Minimal code example #####\nlibrary(ggplot2)\nlibrary(ggalluvial)\n#A wide data format\ntitanic_wide_format &lt;- data.frame(Titanic)\n\nggplot(data = titanic_wide_format,\n       aes(axis1 = Class, axis2 = Sex, axis3 = Age, y = Freq)) +\n  geom_alluvium(aes(fill = Survived)) +\n  geom_stratum()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ten additional geoms for ggplot2</span>"
    ]
  },
  {
    "objectID": "03_ggplot2_ext.html#beeswarm-plots",
    "href": "03_ggplot2_ext.html#beeswarm-plots",
    "title": "3  Ten additional geoms for ggplot2",
    "section": "3.2 Beeswarm plots",
    "text": "3.2 Beeswarm plots\nScatter plots are often used to visualize the relationship between two numerical variables. However, scatter plots can be difficult to interpret when there are many data points. A beeswarm plot is a great alternative to scatter plots, because it avoids over-plotting. Essentially, the beeswarm plot spreads the data points along the axis to avoid overlapping. For example, the following plot depicts body mass for each species and sex of the palmerpenguins data (Horst, Hill, and Gorman 2020).\n\n\n\n\n\n\n\n\n\nUse the geom_quasirandom() function from the ggbeeswarm package to create a beeswarm plot (Clarke and Sherrill-Mix 2017). The function spreads the data points along the axis to avoid overlapping. The method argument applies a specific algorithm to spread the data points. For example, pick quasirandom, pseudorandom, or smiley.\n\n#Minimal code example #####\nlibrary(ggbeeswarm)\n\nggplot(penguins, aes(species, body_mass_g, \n                     color = sex)) + \n    geom_quasirandom()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ten additional geoms for ggplot2</span>"
    ]
  },
  {
    "objectID": "03_ggplot2_ext.html#choropleth-maps",
    "href": "03_ggplot2_ext.html#choropleth-maps",
    "title": "3  Ten additional geoms for ggplot2",
    "section": "3.3 Choropleth maps",
    "text": "3.3 Choropleth maps\nA choropleth map is a great way to visualize geographical data. The color of each area is proportional to the observed value. The example plot shows the US unemployment rates in 2009.\n\n\n\n\n\n\n\n\n\nCreating a choropleth map can be tricky, because you need to match the data with the corresponding geographical areas.\nMoreover, the shape of the geographical areas must be drawn before filling them with the observed value. The ggplot2 provides the geom_sf() function to create a map (Wickham et al. 2022). The sf package is used to handle spatial data (sf?). Moreover, the ggmap package helps to create maps (Kahle, Wickham, and Jackson 2019; Kahle and Wickham 2013), because it provides the geom_map() function. The function fills the geographical areas with the observed value.\nThe minimal code example shows how to create a choropleth map with the USArrests data. The minimal code does not need any additional package and shows an example from the ggplot2 cheat sheet. If the corresponding geographical areas can be matched with the data, geom_map() draws the map and fills each area.\n\n#Minimal code example #####\n#Source: This example comes from the ggplot2 cheat sheet!\nmap &lt;- map_data(\"state\")\ndata &lt;- data.frame(murder = USArrests$Murder,\n                   state = tolower(rownames(USArrests)))\n\nggplot(data, aes(fill = murder))+\n  geom_map(aes(map_id = state), map = map)+\n  expand_limits(x = map$long, y = map$lat)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ten additional geoms for ggplot2</span>"
    ]
  },
  {
    "objectID": "03_ggplot2_ext.html#dot-and-whisker-plot-copilot-stopped-here",
    "href": "03_ggplot2_ext.html#dot-and-whisker-plot-copilot-stopped-here",
    "title": "3  Ten additional geoms for ggplot2",
    "section": "3.4 Dot-and-whisker plot: Copilot stopped here",
    "text": "3.4 Dot-and-whisker plot: Copilot stopped here\nA dot-and-whisker plot is a plot that shows the point estimates and confidence intervals of regression coefficients. It is a useful tool for visualizing the uncertainty associated with regression estimates. In the example below, I just run an example analysis with the palmerpenguins data.\n\n\n\n\n\n\n\n\n\nThe dotwhisker package creates dot-and-whisker plots. It allows users to customize the appearance of the plot by adjusting various parameters such as the color and size of the dots and whiskers. However, if you need to come up with a quick solution, the jtools package also implements convenient solutions.\n\nlibrary(dotwhisker)\nlibrary(palmerpenguins)\n\nm1 &lt;- lm(flipper_length_mm ~ bill_length_mm,\n           data = penguins)\nm2 &lt;- lm(flipper_length_mm ~ bill_length_mm + sex,\n           data = penguins)\n\ndwplot(list(m1, m2),\n       vline = geom_vline(xintercept = 0))",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ten additional geoms for ggplot2</span>"
    ]
  },
  {
    "objectID": "03_ggplot2_ext.html#dumbbell-and-lollipop-charts",
    "href": "03_ggplot2_ext.html#dumbbell-and-lollipop-charts",
    "title": "3  Ten additional geoms for ggplot2",
    "section": "3.5 Dumbbell and lollipop charts",
    "text": "3.5 Dumbbell and lollipop charts\nThe ggcharts package is for the lazy cats and gives access to a lot of common charts (Neitmann 2020). The package has implemented graphs such as dumbbell and lollipop charts with its own functions, and we don’t have to create each step on our own.\nFor example, create a dumbbell or a lollipop chart. I used the former to examine how life expectancy increased between 1952 and 2007 based on the gapminder data. The example shows the top 10 European countries with the highest increase in life expectancy.\n\n\n\n\n\n\n\n\n\n\n#Minimal code example #####\nlibrary(ggcharts)\ndata(\"popeurope\")\n\ndumbbell_chart(popeurope, \n               x = country,\n               y1 = pop1952, y2 = pop2007,\n               top_n = 10)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ten additional geoms for ggplot2</span>"
    ]
  },
  {
    "objectID": "03_ggplot2_ext.html#hexbin-map",
    "href": "03_ggplot2_ext.html#hexbin-map",
    "title": "3  Ten additional geoms for ggplot2",
    "section": "3.6 Hexbin map",
    "text": "3.6 Hexbin map\nCreate a hexbin map with ggplot2. A hexbin map is a great way to visualize the density of data points in a geographical area. It may surprise you, there is no extension package needed. The geom_polygon() function creates the hexbin map and here it shows US unemployment rates.\n\n\n\n\n\n\n\n\n\nThe graph is inspired by r-graph-gallery.com website. It shows a great variety of (ggplot2) visualization, provides a lot of resources to create plots, and has articles that discuss the limitations of graphs as well. Have you ever seen a radar, a stream, or a sunburst chart? Visit the website and learn how to make them.\n\n#Minimal code example #####\n#There are many graphs (and code) to explore on:\n#www.r-graph-gallery.com",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ten additional geoms for ggplot2</span>"
    ]
  },
  {
    "objectID": "03_ggplot2_ext.html#mosaic-plots",
    "href": "03_ggplot2_ext.html#mosaic-plots",
    "title": "3  Ten additional geoms for ggplot2",
    "section": "3.7 Mosaic plots",
    "text": "3.7 Mosaic plots\nMosaic (or spine) plots are a great way to visualize the relationship between two categorical variables. The area of each rectangle is proportional to the number of observations in each category. I used the titanic data to depict the effect of passenger’s sex on survival. Obviously, more women than men survived the accident.\n\n\n\n\n\n\n\n\n\nThe ggmosaic() package provides the corresponding geom (Jeppson, Hofmann, and Cook 2021). The package is a great tool to create mosaic plots and it is easy to use. The minimal code example shows how to create a mosaic plot with the titanic data. The product function is used to create a two-way table.\n\n#Minimal code example #####\nlibrary(ggmosaic)\n\nggplot(data = titanic) +\n  geom_mosaic(aes(x = product(Sex), \n                  fill = Survived))",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ten additional geoms for ggplot2</span>"
    ]
  },
  {
    "objectID": "03_ggplot2_ext.html#ridge-plots",
    "href": "03_ggplot2_ext.html#ridge-plots",
    "title": "3  Ten additional geoms for ggplot2",
    "section": "3.8 Ridge plots",
    "text": "3.8 Ridge plots\nA ridge plot is a great way to visualize the distribution of a numerical variable across different categories. The plot shows the density of the variable for each category. In the example plot, I used the gapminder data to visualize the distribution of life expectancy across different continents. Europe has the highest, while Africa had the lowest life expectancy. The distribution is much wider in Africa compared to other continents.\n\n\n\n\n\n\n\n\n\nThe ggridges package was developed by (wilke_ggridges_2018?) and provides many examples to create ridge plots (Wilke 2021). The package creates a ridge plot and fills the area under the curve with a gradient color. As the code from the ggridges vignette illustrates, explore how the weather (temperature) changes over a year.\n\n#Minimal code example #####\nlibrary(ggridges)\n\n#Minimal code by Claus Wilke:\nggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = Month, \n                            fill = stat(x))) +\n  geom_density_ridges_gradient(scale = 3, \n                               rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\", \n                       option = \"C\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ten additional geoms for ggplot2</span>"
    ]
  },
  {
    "objectID": "03_ggplot2_ext.html#treemaps",
    "href": "03_ggplot2_ext.html#treemaps",
    "title": "3  Ten additional geoms for ggplot2",
    "section": "3.9 Treemaps",
    "text": "3.9 Treemaps\nA treemap is a great way to visualize hierarchical data. The area of each rectangle is proportional to the observed value. Before he was banned, Donald Trump was a huge fan of Twitter and Axios collected and categorized his tweets. Some tweets were about the media, democrats, and the grand old party (GOP), with further subgroups within each category. I used this data and the treemapify package to make a treemap (Wilkins 2021). Mr. Trump tweeted a lot about “the media” and the “Democrats” in 2019.\n\n\n\n\n\n\n\n\n\nIn the example below I used the gapminder data to visualize the GDP per capita and life expectancy of European countries in 2007. The treemapify package provides the geom_treemap() function to create a treemap. The geom_treemap_text() function adds labels to the treemap.\n\n#Minimal code example #####\nlibrary(treemapify)\nlibrary(gapminder)\n\ndata &lt;- gapminder::gapminder |&gt; \n  dplyr::filter(year == 2007 & continent == \"Europe\")\n\nggplot(data, aes(area = gdpPercap, \n                 fill = lifeExp, \n                 label = country)) +\n  geom_treemap() +\n  geom_treemap_text(color = \"white\", \n                    grow = TRUE)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ten additional geoms for ggplot2</span>"
    ]
  },
  {
    "objectID": "03_ggplot2_ext.html#waffle-charts",
    "href": "03_ggplot2_ext.html#waffle-charts",
    "title": "3  Ten additional geoms for ggplot2",
    "section": "3.10 Waffle charts",
    "text": "3.10 Waffle charts\nAn alternative for a pie chart is a waffle chart. The latter depicts values across different categories and the area of each rectangle is proportional to the observed value. In case of percentages, the area of each rectangle is proportional to the percentage value. My example shows the leaky pipeline in academia. Did you know that after each transition step in higher education (e.g., graduation, Ph.D.), more men than women remain in the system? The sex ratios become skewed till the end of the academic pathway. I used a waffle chart to illustrate the leaky pipeline for Germany in 2020.\n\n\n\n\n\n\n\n\n\nThe waffle package provides the waffle() function to create a waffle chart (Rudis and Gandy 2017). The rows argument controls the number of rows in the chart. The minimal code shows how to create a waffle chart with a toy vector.\n\n#Minimal code example #####\nlibrary(waffle)\nparts &lt;- c(66, 22, 12)\n\nwaffle(parts, rows = 10)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ten additional geoms for ggplot2</span>"
    ]
  },
  {
    "objectID": "03_ggplot2_ext.html#word-clouds",
    "href": "03_ggplot2_ext.html#word-clouds",
    "title": "3  Ten additional geoms for ggplot2",
    "section": "3.11 Word clouds",
    "text": "3.11 Word clouds\nA word cloud shows the frequency of words in a text. The size of each word is proportional to its frequency. The plot shows the word cloud of a children’s book that I made with the ggwordcloud package (Le Pennec and Slowikowski 2022). Witches and wizards play a big role in this book.\n\n\n\n\n\n\n\n\n\nThe ggwordcloud package provides the geom_text_wordcloud() function to create a word cloud. The size argument controls the size of the words. The minimal code example shows how to create a word cloud with the love_words_small data.\n\n#Minimal code example by Erwan Le Pennec \nlibrary(ggwordcloud)\n#set a seed (starting point)\nset.seed(123)\n\nggplot(love_words_small, aes(label = word, \n                             size = speakers)) +\n  geom_text_wordcloud() +\n  scale_size_area(max_size = 30)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ten additional geoms for ggplot2</span>"
    ]
  },
  {
    "objectID": "03_ggplot2_ext.html#summary",
    "href": "03_ggplot2_ext.html#summary",
    "title": "3  Ten additional geoms for ggplot2",
    "section": "3.12 Summary",
    "text": "3.12 Summary\nThis blog highlighted packages to extend the possibilities of ggplot2, but there are too many to discuss them all. For example, ggtext helps to handle text (Wilke 2020); you can visualize the results of a survival analysis with survminer (Kassambara, Kosinski, and Biecek 2021); or create cool animations with gganimate (Pedersen and Robinson 2022).\nFinally, go and visit the ggplot2 website to explore more extensions.\n\n\n\n\nBrunson, Jason Cory, and Quentin D. Read. 2020. Ggalluvial: Alluvial Plots in Ggplot2. https://CRAN.R-project.org/package=ggalluvial.\n\n\nClarke, Erik, and Scott Sherrill-Mix. 2017. Ggbeeswarm: Categorical Scatter (Violin Point) Plots. https://CRAN.R-project.org/package=ggbeeswarm.\n\n\nHorst, Allison Marie, Alison Presmanes Hill, and Kristen B Gorman. 2020. “Palmerpenguins: Palmer Archipelago (Antarctica) Penguin Data.” https://doi.org/10.5281/zenodo.3960218.\n\n\nJeppson, Haley, Heike Hofmann, and Di Cook. 2021. Ggmosaic: Mosaic Plots in the Ggplot2 Framework. https://CRAN.R-project.org/package=ggmosaic.\n\n\nKahle, David, and Hadley Wickham. 2013. “Ggmap: Spatial Visualization with Ggplot2.” The R Journal 5 (1): 144–61. https://journal.r-project.org/archive/2013-1/kahle-wickham.pdf.\n\n\nKahle, David, Hadley Wickham, and Scott Jackson. 2019. Ggmap: Spatial Visualization with Ggplot2. https://CRAN.R-project.org/package=ggmap.\n\n\nKassambara, Alboukadel, Marcin Kosinski, and Przemyslaw Biecek. 2021. Survminer: Drawing Survival Curves Using Ggplot2. https://CRAN.R-project.org/package=survminer.\n\n\nLe Pennec, Erwan, and Kamil Slowikowski. 2022. Ggwordcloud: A Word Cloud Geom for Ggplot2.\n\n\nNeitmann, Thomas. 2020. Ggcharts: Shorten the Distance from Data Visualization Idea to Actual Plot. https://CRAN.R-project.org/package=ggcharts.\n\n\nPedersen, Thomas Lin, and David Robinson. 2022. Gganimate: A Grammar of Animated Graphics. https://CRAN.R-project.org/package=gganimate.\n\n\nRudis, Bob, and Dave Gandy. 2017. Waffle: Create Waffle Chart Visualizations in r. https://CRAN.R-project.org/package=waffle.\n\n\nWickham, Hadley, Winston Chang, Lionel Henry, Thomas Lin Pedersen, Kohske Takahashi, Claus Wilke, Kara Woo, Hiroaki Yutani, and Dewey Dunnington. 2022. Ggplot2: Create Elegant Data Visualisations Using the Grammar of Graphics. https://CRAN.R-project.org/package=ggplot2.\n\n\nWilke, Claus O. 2020. Ggtext: Improved Text Rendering Support for ’Ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\n———. 2021. Ggridges: Ridgeline Plots in ’Ggplot2’. https://CRAN.R-project.org/package=ggridges.\n\n\nWilkins, David. 2021. Treemapify: Draw Treemaps in ’Ggplot2’. https://CRAN.R-project.org/package=treemapify.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ten additional geoms for ggplot2</span>"
    ]
  },
  {
    "objectID": "04_gist.html",
    "href": "04_gist.html",
    "title": "4  Manage Code Snippets with GitHub Gist",
    "section": "",
    "text": "4.1 Installation\nWhy should we consider GitHub Gist for code snippets? It is a simple way to share code snippets with others. Moreover, you can embed gists in websites, blogs, and other documents. However, the best part about Gist is that your futrue self can access your code snippets from anywhere.\nFor this reason I wrote a simple R package to manage Gists. The gist package provides a set of functions to work with GitHub Gist. It allows you to copy, create, and delete gists via the GitHub API. Moreover, it comes with an R Studio addin - a shiny app - to manage your Gists.\nThis article outlines why GitHub Gist is a great tool for code snippets and how to use the gist package.\nYou can install the development version of gist like so:\ndevtools::install_github(\"edgar-treischl/gist\")\nIn order to connect with the Git Hub API, you need to provide a GitHub API token (names as: github_api) with the keyring package. Use the key_set() function to store your token safely:\n#Save GitHub API token as github_api\nkeyring::key_set(service = \"github_api\")",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Manage Code Snippets with GitHub Gist</span>"
    ]
  },
  {
    "objectID": "04_gist.html#workflow",
    "href": "04_gist.html#workflow",
    "title": "4  Manage Code Snippets with GitHub Gist",
    "section": "4.2 Workflow",
    "text": "4.2 Workflow\nThere is no need to learn how the package works, because it comes with an R Studio addin that let you manage Gists. Go to the addin menu or use the following code to open the gist app. The app shows a list with your gist files and a preview of the code. Pick a gist and copy or insert the code. Furthermore, the app has tabs to create and delete gists as well.\n\n#The gistAddin()\nlibrary(gist)\ngist::gistAddin()\n\n\n\n\n\n\nIf you want to interact via R, you can use the following functions. Create a new Gist via:\n\n#Create a gist\ngist_create(name = \"A_Test.R\", \n            code = '#Test\n            print(\"Hello world\")', \n            description = \"Test Gist\")\n\n#&gt; [1] \"TRUE\"\n\n\nGet a gist via:\n\n#gistfiles lists all files and returns names and ids\ngist_get(filename = \"A_Test.R\")\n\n#&gt; ✔ Copied A_Test.R from your GitHub account.\n\nSet the raw parameter to TRUE in case you need the raw character vector. Finally, let us delete a gist. Therefore, you need to inspect your gists to get to know the id of a gist.\n\n#gistFiles lists all files and returns names and ids\nmygists &lt;- gist::gistFiles()\nmygists |&gt; head()\n\n#&gt;                      file                               id\n#&gt; 1                A_Test.R 43c409113312e8ee7073fbe539c4db96\n#&gt; 2          Create_XML.sql 0a7ec749730c674e4bbaecc2b03ddcf1\n#&gt; 3            attachment.R 0daa7241e752a4c4f77ad0085b9d7694\n#&gt; 4              blastula.R c207c4d4f35be94bf20f6c1882d622db\n#&gt; 5 blastula_render_email.R d83b171315dba56157514f75b5bc857b\n#&gt; 6                 clear.R 27a596e3c9cf3b533936e771a01d840f\n\n\nTo delete a gist, give the id the gist_delete() function.\n\n#Delete a gist\ngist::gist_delete(id = mygists$id[1])\n\n#&gt; [1] \"TRUE\"\n\n\nIn summary, consider GitHub Gist if your code snippets are scattered somewhere on your computer. The gist package provides a simple way to manage your Gists and the R Studio addin makes it easy to get started.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Manage Code Snippets with GitHub Gist</span>"
    ]
  },
  {
    "objectID": "05_cpp.html",
    "href": "05_cpp.html",
    "title": "5  C++ Basics",
    "section": "",
    "text": "5.1 Hello World\n#include &lt;Rcpp.h&gt;\nusing namespace Rcpp;\n// [[Rcpp::export]]\nNumericVector timesTwo(NumericVector x) {\n  return x * 2;\n}\ntimesTwo(42)\n\n[1] 84",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>C++ Basics</span>"
    ]
  },
  {
    "objectID": "06_cli.html",
    "href": "06_cli.html",
    "title": "6  CLI Basics",
    "section": "",
    "text": "6.1 Echo\nThe Command Line Interface (CLI) is a powerful tool for interacting with computers and automating tasks. Also known as the terminal, shell, or console (depending on the operating system), the CLI is widely used by system administrators, developers, and power users to perform tasks that are either impossible or inefficient with a Graphical User Interface (GUI).\nIn contrast to a GUI—where you might manually copy and paste files—the CLI enables you to automate processes, quickly search for files, and execute complex tasks with greater efficiency.\nIn this article, we’ll explore the basics of the Command Line Interface (CLI) and cover essential commands that are particularly useful for data-related tasks. We will also dive into how to redirect command output to a file, count lines, words, and characters within a file, and display a CSV file in a neat, tabular format.\nThe echo command is used to print text to the terminal.\nThe echo command is used to display text or output to the terminal. It’s often used for printing simple messages or checking the result of a command, making it a versatile tool for both beginners and advanced users.\n# Say hello to CLI\necho \"Hello CLI \"\n\nHello CLI\nWe can use the &gt; operator to redirect the output of a command to a file. For example, the following command will write the text “Hello CLI” to a file called greeting.txt. If you add a second &gt; operator, the output will be appended to the file instead of overwriting it. Here we append the text “World”. Finally, we use the cat command to display the contents of the file. The shell cat command is used to concatenate and display the content of files.\nWe can use the &gt; operator to redirect the output of a command to a file. For instance, the following command will write the text Hello CLI to a file named greeting.txt. If you use a second &gt; operator (&gt;&gt;), the output will be appended to the file instead of overwriting it. Here, we append the text “World”. Finally, we use the cat command to display the file’s contents. The cat command is commonly used to concatenate and display the contents of files.\n# Redirect the output of a command to a file\necho -n \"Hello CLI \" &gt; greeting.txt\n\n# Append the output\necho \"World\" &gt;&gt; greeting.txt\n\n# Display the content of the file\ncat greeting.txt\n\nHello CLI World",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>CLI Basics</span>"
    ]
  },
  {
    "objectID": "06_cli.html#pwd-and-ls",
    "href": "06_cli.html#pwd-and-ls",
    "title": "6  CLI Basics",
    "section": "6.2 Pwd and ls",
    "text": "6.2 Pwd and ls\nThe pwd command is used to print the current working directory. The ls command is used to list the files and directories in the current directory.\nThe pwd command prints the current working directory, while the ls command lists the files and directories in the current directory.\n\n# pwd: Print the current working directory\npwd\n\n# ls: List the files and directories in the current directory\nls\n\n/Users/edgar/Documents/GitHub/Medium\n01_scan.html\n01_scan.qmd\n01_scan_files\n02_master_sql.html\n02_master_sql.qmd\n02_master_sql_files\n03_ggplot2_ext.html\n03_ggplot2_ext.qmd\n04_gist.html\n04_gist.qmd\n05_cpp.html\n05_cpp.qmd\n06_CLI.qmd\n06_cli.rmarkdown\n07_GitHub.qmd\nMedium.Rproj\n_quarto.yml\nchapters.txt\ncover.png\ndata\ndocs\ngreeting.txt\nideas\nindex.html\nindex.qmd\nplots\nprogress-bar.html\nreferences.bib\nreferences.qmd\nreferences_files\nsite_libs\nsource\nsql_code.txt\n\n\nThe -l option can be added to ls to display the files and directories in a long listing format. Additionally, the head command shows the first few lines of a file or output. The | (pipe) operator allows you to pass the output of one command as input to another.\n\n# ls -l: List files and directories in long format, then pipe the output to head\nls -l | head\n\ntotal 1112\n-rw-r--r--@  1 edgar  staff  66056 Mar 23 10:50 01_scan.html\n-rw-r--r--@  1 edgar  staff  17025 Feb  4 19:37 01_scan.qmd\ndrwxr-xr-x@  3 edgar  staff     96 Mar 23 10:51 01_scan_files\n-rw-r--r--@  1 edgar  staff  55363 Mar 23 10:50 02_master_sql.html\n-rw-r--r--@  1 edgar  staff  11689 Jun  2  2024 02_master_sql.qmd\ndrwx------   3 edgar  staff     96 Mar 23 10:50 02_master_sql_files\n-rw-r--r--@  1 edgar  staff  66002 Mar 23 10:51 03_ggplot2_ext.html\n-rw-r--r--@  1 edgar  staff  13722 Jun 29  2024 03_ggplot2_ext.qmd\n-rw-r--r--@  1 edgar  staff  34942 Mar 23 10:51 04_gist.html",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>CLI Basics</span>"
    ]
  },
  {
    "objectID": "06_cli.html#whoami-and-uname",
    "href": "06_cli.html#whoami-and-uname",
    "title": "6  CLI Basics",
    "section": "6.3 Whoami and uname",
    "text": "6.3 Whoami and uname\nThe whoami command prints the username of the current user. On the other hand, the uname -a command displays detailed system information, including the operating system, kernel version, and hostname. The -a option stands for “all” and ensures all available information is shown.\n\n# whoami: Print the username of the current user\nwhoami\n\nedgar\n\n\n\n# uname -a: Print detailed system information\nuname -a\n\nDarwin Mac.fritz.box 24.3.0 Darwin Kernel Version 24.3.0: Thu Jan  2 20:24:23 PST 2025; root:xnu-11215.81.4~3/RELEASE_ARM64_T6020 arm64",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>CLI Basics</span>"
    ]
  },
  {
    "objectID": "06_cli.html#curl",
    "href": "06_cli.html#curl",
    "title": "6  CLI Basics",
    "section": "6.4 Curl",
    "text": "6.4 Curl\nThe curl command is used to transfer data to or from a server. It supports a variety of protocols, including HTTP, HTTPS, FTP, and SCP. Commonly, curl is used to download files from the internet, test APIs, and perform other network-related tasks. With its wide array of options and features, curl is a powerful tool. To view available options and get more information, you can use the --help option to display the help message.\n\n# curl: Transfer data to or from a server\ncurl --help\n\nUsage: curl [options...] &lt;url&gt;\n -d, --data &lt;data&gt;           HTTP POST data\n -f, --fail                  Fail fast with no output on HTTP errors\n -h, --help &lt;category&gt;       Get help for commands\n -i, --include               Include response headers in output\n -o, --output &lt;file&gt;         Write to file instead of stdout\n -O, --remote-name           Write output to file named as remote file\n -s, --silent                Silent mode\n -T, --upload-file &lt;file&gt;    Transfer local FILE to destination\n -u, --user &lt;user:password&gt;  Server user and password\n -A, --user-agent &lt;name&gt;     Send User-Agent &lt;name&gt; to server\n -v, --verbose               Make the operation more talkative\n -V, --version               Show version number and quit\n\nThis is not the full help, this menu is stripped into categories.\nUse \"--help category\" to get an overview of all categories.\nFor all options use the manual or \"--help all\".\n\n\nAs the next console shows, the tldr curl command is used to display a simplified version. The tldr command is a community-driven project that provides simplified and practical examples of how to use various commands. The tldr command is a great resource for learning how to use commands quickly and efficiently.\nAs shown in the following example, the tldr curl command provides a simplified version of the curl command. The tldr command is part of a community-driven project that offers practical, easy-to-understand examples for various commands. It’s a great resource for quickly learning how to use commands efficiently.\n\n# tldr: Display a simplified version of the curl command\ntldr curl\n\nCache is out of date. You should run \"tldr --update\"\n\n  curl\n\n  Transfers data from or to a server.\n  Supports most protocols, including HTTP, FTP, and POP3.\n  More information: https://curl.se/docs/manpage.html.\n\n  - Download the contents of a URL to a file:\n    curl http://example.com --output path/to/file\n\n  - Download a file, saving the output under the filename indicated by the URL:\n    curl --remote-name http://example.com/filename\n\n  - Download a file, following location redirects, and automatically continuing (resuming) a previous file transfer and return an error on server error:\n    curl --fail --remote-name --location --continue-at - http://example.com/filename\n\n  - Send form-encoded data (POST request of type application/x-www-form-urlencoded). Use --data @file_name or --data @'-' to read from STDIN:\n    curl --data 'name=bob' http://example.com/form\n\n  - Send a request with an extra header, using a custom HTTP method:\n    curl --header 'X-My-Header: 123' --request PUT http://example.com\n\n  - Send data in JSON format, specifying the appropriate content-type header:\n    curl --data '{\"name\":\"bob\"}' --header 'Content-Type: application/json' http://example.com/users/1234\n\n  - Pass a username and prompt for a password to authenticate to the server:\n    curl --user username http://example.com\n\n  - Pass client certificate and key for a resource, skipping certificate validation:\n    curl --cert client.pem --key key.pem --insecure https://example.com\n\n\nTo download a file from the internet using curl, we can use the -O option, which saves the file with the same name as the remote file. The following command downloads a text file from the Gutenberg Project and saves it to the current directory. The -s option silences the progress meter and other output.\nAdditionally, we can use the grep command to search for a specific pattern in the output. The following command downloads the text file, searches for the word “CHAPTER,” and displays all lines containing that word.\n\n# grep: search for a specific pattern in the output\ncurl -s \"https://www.gutenberg.org/files/11/11-0.txt\" | grep \" CHAPTER\"\n\n CHAPTER I.     Down the Rabbit-Hole\n CHAPTER II.    The Pool of Tears\n CHAPTER III.   A Caucus-Race and a Long Tale\n CHAPTER IV.    The Rabbit Sends in a Little Bill\n CHAPTER V.     Advice from a Caterpillar\n CHAPTER VI.    Pig and Pepper\n CHAPTER VII.   A Mad Tea-Party\n CHAPTER VIII.  The Queen’s Croquet-Ground\n CHAPTER IX.    The Mock Turtle’s Story\n CHAPTER X.     The Lobster Quadrille\n CHAPTER XI.    Who Stole the Tarts?\n CHAPTER XII.   Alice’s Evidence",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>CLI Basics</span>"
    ]
  },
  {
    "objectID": "06_cli.html#csvlook",
    "href": "06_cli.html#csvlook",
    "title": "6  CLI Basics",
    "section": "7.1 Csvlook",
    "text": "7.1 Csvlook\nThe csvlook command is used to display a CSV file in a tabular format. The following command will display the contents of the chapters.txt file in a clean, tabular layout.\n\n# csvlook: Display a CSV file in a tabular format\ncsvlook chapters.txt\n\n/opt/homebrew/Cellar/csvkit/2.0.1/libexec/lib/python3.13/site-packages/agate/table/from_csv.py:83: RuntimeWarning: Error sniffing CSV dialect: Could not determine delimiter\n  kwargs['dialect'] = csv.Sniffer().sniff(sample)\n|  CHAPTER I.     Down the Rabbit-Hole              |\n| ------------------------------------------------- |\n|  CHAPTER II.    The Pool of Tears                 |\n|  CHAPTER III.   A Caucus-Race and a Long Tale     |\n|  CHAPTER IV.    The Rabbit Sends in a Little Bill |\n|  CHAPTER V.     Advice from a Caterpillar         |\n|  CHAPTER VI.    Pig and Pepper                    |\n|  CHAPTER VII.   A Mad Tea-Party                   |\n|  CHAPTER VIII.  The Queen’s Croquet-Ground        |\n|  CHAPTER IX.    The Mock Turtle’s Story           |\n|  CHAPTER X.     The Lobster Quadrille             |\n|  CHAPTER XI.    Who Stole the Tarts?              |\n|  CHAPTER XII.   Alice’s Evidence                  |\n\n\nThere’s no need to leave the R environment to use the CLI. The system function in R allows you to execute shell commands directly from within R.\n\n# R system: Execute a shell command from R\nsystem(\"echo 'Goodbye CLI'\")\n\nIn Python, you can use the subprocess module to run shell commands. The following Python code will execute the echo command and print the output.\n\n# Python subprocess: Execute a shell command from Python\nimport subprocess\noutput = subprocess.check_output(\"echo 'Goodbye CLI'\", shell=True)\nprint(output.decode())\n\nGoodbye CLI\n\n\nIn summary, the CLI is a powerful and versatile tool that enables you to perform a wide range of tasks efficiently and effectively. It’s commonly used by system administrators, developers, and power users to accomplish tasks that are often more difficult or time-consuming with a graphical user interface. In this article, we covered several CLI basics, including the echo, pwd, ls, whoami, uname, curl, and grep commands. We also explored how to redirect the output of a command to a file, count lines, words, and characters in a file, and display a CSV file in a neat, tabular format.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>CLI Basics</span>"
    ]
  },
  {
    "objectID": "07_GitHub.html",
    "href": "07_GitHub.html",
    "title": "7  Git(Hub): A Gentle Introduction for R Users",
    "section": "",
    "text": "7.1 Introduction\nGit is a version control system used to track changes in code over time. It is also an essential tool for sharing work, collaborating, and automating repetitive tasks. GitHub and GitLab are platforms built around Git that allow developers to host, share, and collaborate on Git-based projects. Git is considered best practice in software development, but unfortunately, it has not yet become a standard tool in academic curricula. This article aims to introduce GitHub (and Git) in a non-technical fashion.\nGit can be intimidating, especially for beginners. Fortunately, R users have a head start because several R packages and RStudio make it easy to work with Git. For example, the usethis package provides functions to set up Git, create repositories, and share code (Wickham et al. 2024). RStudio, on the other hand, offers a Git pane that simplifies common Git operations with the click of a button.\nFor example: Suppose your code lives on GitHub. While others can download it, they can also run it directly. The next time you update the code, other people only need to rerun it to access the latest version. The source_url() function from the devtools package allows you to execute R code directly from a URL (Wickham et al. 2022). As the next code chunk demonstrates, pacman.R creates a plot when sourced, but the code to create this plot lives only in my GitHub account.\n# Link to GitHub repository\nlink &lt;- paste0(\"https://raw.githubusercontent.com/\",\n               \"edgar-treischl/edgar/refs/heads/\",\n               \"master/inst/graphs/pacman.R\")\n\n# Source the code, show the plot from the source file\ndevtools::source_url(link)\nshowplot()\nGit is an essential tool for any data scientist, and GitHub is a game-changer in many ways. This article introduces Git and GitHub to R users, focusing on how R packages and RStudio make it easy to work with these tools.1 If you’re not an R user, don’t worry! The concepts are applicable to any programming language, and I will highlight some alternatives.\nThe article is structured as follows: First, we examine how to set up and use Git. Then, I’ll cover the most important Git basics with a focus on troubleshooting. Finally, I highlight GitHub Actions and where to find more information on setting up a CI/CD pipeline.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Git(Hub): A Gentle Introduction for R Users</span>"
    ]
  },
  {
    "objectID": "07_GitHub.html#getting-started",
    "href": "07_GitHub.html#getting-started",
    "title": "7  Git(Hub): A Gentle Introduction for R Users",
    "section": "7.2 Getting Started",
    "text": "7.2 Getting Started\nTo get started with Git(Hub), there are three key steps: (1) Install Git on your local machine. (2) Create a GitHub account and connect RStudio (or a different IDE) with GitHub. (3) Learn how to work with Git and RStudio on a regular basis.\n\n7.2.1 Install Git\nDepending on your operating system, follow one of the installation instructions:\n\nWindows: https://git-scm.com/downloads/win\nOS X: https://git-scm.com/downloads/mac\nDebian/Ubuntu: https://git-scm.com/downloads/linux\n\nAfter installing Git, insert git --version into the console to check if the installation was successful. It returns the installed version if everything went well.\n\n# Go to the console and type:\ngit --version\n\ngit version 2.39.5 (Apple Git-154)\n\n\nNext, you need to introduce yourself. Git needs to know your identity to track changes properly and attribute them to you. Set your username and email address with the git config command. You can configure this directly in the console or use the usethis package, which offers additional functionality for setting up your Git environment.\n\n# Set your user name and email address via R\nlibrary(usethis)\nuse_git_config(user.name = \"Edgar Doe\",\n               user.email = \"edgar@example.org\")\n\n# Or set your user name and email address via the shell\ngit config --global user.name \"User Name\"\ngit config --global user.email \"email@adress.com\"\nCheck if the configuration was successful via the git configuration list. It should return your username and email address.\n\ngit config --global --list\n\nfilter.lfs.clean=git-lfs clean -- %f\nfilter.lfs.smudge=git-lfs smudge -- %f\nfilter.lfs.process=git-lfs filter-process\nfilter.lfs.required=true\nuser.name=Edgar Treischl\nuser.email=77931249+edgar-treischl@users.noreply.github.com\ncore.excludesfile=~/.gitignore\n\n\n\n\n7.2.2 Create a GitHub account and connect RStudio\nLet’s familiarize with some key terminology before we continue. Because of its technical jargon, Git may seem overwhelming. Don’t worry, we only need a basic understanding of the most important terms:\n\nRepository: A folder that contains all project files.\nPush: Means to upload code (or files) to a Git repository.\nPull: Means to retrieve code (or files) from a Git repository.\nCommit: A snapshot of a repository at a specific point in time.\nBranch: A separate version of the repository, for example, to test new features.\nMerge: Combining changes from two branches into one.\nMerge conflicts: Occur when two branches modify the same part of a file, and Git cannot automatically determine which version is correct.\nFork: A copy of another repository, typically used to make changes to someone else’s project.\nPull request: A way to propose changes to a repository.\n\nCertainly, pushing and pulling code, committing changes, and understanding Git concepts does not come naturally. However, we’ll gain a deeper understanding by putting these concepts into practice. To this end, create a free GitHub account first:\nhttps://github.com/\nAfter creating a GitHub account, you can connect GitHub and RStudio with a personal access token (PAT). The usethis package makes this step convenient. Execute the create_github_token() function. A browser window will open, directing you to the GitHub page where you can create a token (https://github.com/settings/tokens). GitHub provides various options for customizing a token. You can set it to expire after a certain time, restrict it to specific repositories, or limit it to certain actions. If you create a token for the very first time, just stick to the default settings and copy it.\n\n# The create_github_token() function opens the browser and show where to create the token\nusethis::create_github_token()\n\nThe set_github_pat() function from the credentials package helps us connect to GitHub and stores the PAT (Ooms 2024). Run the function and paste the copied token into the menu that pops up.\n\n#The set_github_pat() function will store the token\ncredentials::set_github_pat()\n\nFinally, check if RStudio can authenticate to GitHub using the gh package (Bryan and Wickham 2024). The gh_whoami() function should reveal your GitHub identity.\n\n# Who am I? On GitHub ...\ngh::gh_whoami()\n\n{\n  \"name\": \"Edgar Treischl\",\n  \"login\": \"edgar-treischl\",\n  \"html_url\": \"https://github.com/edgar-treischl\",\n  \"scopes\": \"gist, repo, user, workflow\",\n  \"token\": \"ghp_...Cmqg\"\n} \n\n\nThat’s it! If RStudio recognizes your GitHub identity, you’re all set.\n\n\n7.2.3 Work with GitHub and RStudio\nThe steps we just covered only need to be completed once. Let’s move on and learn how to use Git. First, go back to the GitHub website and create a new repository. This will be just a test repository, so don’t worry too much about the options available during the setup step. You can choose whether to make it public or private, add a README file, or include a license. For the sake of simplicity, just create the repository with the default settings. Add a repository name and create a public repository.\n\n\n\nSource: Treischl(2023): Chapter 9\n\n\nAfter creating a new repository, you’ll see the quick setup guide. This guide shows you how to connect your local repository to the remote repository on GitHub by providing the SSH and HTTPS link. You may use one of the links to clone the remote repository, but since you have created a PAT, we’ll connect using the HTTPS link. Copy the URL and return to RStudio.\n\n\n\nSource: Treischl(2023): Chapter 9\n\n\nTo connect a local with the remote repository on GitHub, we need to clone it. Cloning essentially means copying the remote repository to your local machine. RStudio makes this process straightforward using the Project Wizard:\n\nCreate a new project in RStudio and click “Next.”\nSelect “Version Control.”\nChoose “Git.”\nPaste the repository URL into the corresponding field to clone the project. The next image shows the final step only.\n\n\n\n\nSource: Treischl(2023): Chapter 9\n\n\nThe Git pane should appear in the upper right corner after RStudio has cloned the repository. If the pane doesn’t show up automatically, restart RStudio and check the Git settings. The Git pane provides easy access to basic Git commands and visually displays the status of the repository. Initially, the Git pane will be empty, but when you start working on your project, RStudio will show the differences between your local and remote repositories there.\nFor example, create a new R script, insert some code, and save the script. The new file should appear in the Git pane, marked with a yellow question mark. This indicates that the file isn’t being tracked yet. Once you stage the file, it will be marked with a teal “A” (for added). We’ll explore how to do this shortly. As highlighted in the next image, the same happens if you modify, delete, or rename a file.\n\n\n\nSource: Treischl(2023): Chapter 9\n\n\nNow that we’ve worked on a project, how do we save changes and push them to the remote repository? After creating and saving a new file, we need to stage it. Staging tells Git to track the file. We can do this by checking the box in the Git pane. Next, we must add a commit message. A commit message is a short description of the changes that we’ve made, and it’s good practice to write something meaningful yet concise. Once we’re satisfied with the message, click the “commit” button to save the changes locally. Finally, we can push changes to the remote repository by clicking the corresponding push button. The next image shows these steps in the Git pane.\n\n\n\nSource: Treischl(2023): Chapter 9\n\n\nGit informs us with a cryptic message if attempt to push the files was (not) successful. This message includes the commit hash (which uniquely identifies each commit) and the branch to which the changes were made. You may see something like this if the push was successful:\nTo https://github.com/your_username/your_repository.git\n   abc1234..def5678  main -&gt; main\nGo ahead and inspect the GitHub repository to confirm that the changes were made. What shall we do if the push was not successful? The Git pane in RStudio is a great tool for beginners, but it’s also important to understand what’s happening behind the scene and how to troubleshoot common issues. To this end, the next section introduces the most basic Git commands for working with GitHub. When you click a button in the Git pane, RStudio runs the corresponding Git commands in the background, and learning a few basic is all we need to effectively work with Git.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Git(Hub): A Gentle Introduction for R Users</span>"
    ]
  },
  {
    "objectID": "07_GitHub.html#basic-git-commands",
    "href": "07_GitHub.html#basic-git-commands",
    "title": "7  Git(Hub): A Gentle Introduction for R Users",
    "section": "7.3 Basic Git commands",
    "text": "7.3 Basic Git commands\nWe could skip the initial steps, as we’ve already covered how to initialize a new repository and clone it. Programmatically, we would run:\n# Initialize a new repository\ngit init &lt;your repository name&gt;\n\n# Clone a repository\ngit clone &lt;git-repo-url&gt;\nUse git branch to create a new branch, or add the --list option to view all existing branches.\n# Create a new branch\ngit branch &lt;branch-name&gt;\n\n# List all branches\ngit branch --list\nDelete a branch with git branch -d &lt;branch-name&gt;; switch to a different branch using git checkout.\n# Delete a branch\ngit branch -d &lt;branch-name&gt;\n\n# Switch to a branch\ngit checkout &lt;branch-name&gt;\nAdd a file to the staging area with git add &lt;file&gt;, or stage all files with git add -A.\n# Add a file to the staging area\ngit add &lt;file&gt;\n\n# Add All files to the staging area\ngit add -A\nCommit changes with git commit. The -am option is a shortcut for git add -A followed by git commit -m. Push changes to the remote repository with git push origin &lt;branch-name&gt;.\n# Commit changes\ngit commit -am &lt;commit-message&gt;\n\n# Push changes to the remote rep\ngit push origin &lt;branch-name&gt;\nKeep in mind that you’ll need to pull changes from the remote repository if you’re collaborating with others. Use the git pull command to fetch and merge changes from the remote repository into your local one. If you’re working on a branch and want to merge it with the main branch, you can use the git merge &lt;branch-name&gt; command.\n# Pull changes from the remote rep\ngit pull\n\n# Merge two branches\ngit merge &lt;branch-name&gt;\nDo you need all this Git code if you’re happy with the Git pane? While the pane simplifies common Git operations, using Git commands gives you more control, flexibility, and the ability to manage more complex tasks. For instance, merge conflicts can occur when two branches modify the same part of a file, and Git won’t be able to automatically resolve the conflict. Git commands provide a more detailed understanding of the conflicts, which is especially useful when the conflict isn’t easy to resolve. So, it’s worth learning the commands, particularly for troubleshooting.\nUse git blame to see who changed what and when, git status to view the working tree status, and git diff to inspect the differences between commits.\n# Who is to blame?\ngit blame file.txt\n\n# Shows the working tree status\ngit status\n\n# Shows changes between commits\ngit diff\nBe cautious when reverting or discarding changes! The git revert command creates a new commit that undoes changes from a previous commit. The git reset command resets the repository to a previous commit. And as the last resort, the git reset --hard command forcefully discards any local changes. Keep in mind, once you discard changes, there’s no way to recover them.\n# 💀💀💀 DANGER\n# Revert some existing commits\ngit revert SHA\n\n# Reset the repository to a previous commit \n# Take care: This will discard any local changes\ngit reset \n\n# Ultima ratio only\n# A \"hard reset\": forcefully discard any local changes\nBefore attempting to reset, take a look at the commit history in RStudio. The commit history provides a detailed view of what changes were made and when. It’s a powerful tool for inspecting changes, identifying issues, and reverting changes if necessary.\n\n\n\nSource: Treischl(2023): Chapter 9",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Git(Hub): A Gentle Introduction for R Users</span>"
    ]
  },
  {
    "objectID": "07_GitHub.html#summary",
    "href": "07_GitHub.html#summary",
    "title": "7  Git(Hub): A Gentle Introduction for R Users",
    "section": "7.4 Summary",
    "text": "7.4 Summary\nThis article introduced Git and GitHub to R users, focusing on how R packages and RStudio make it easy to work with these tools. We covered the basic steps to set up Git, create a GitHub account, and connect RStudio with GitHub. We also learned how to work with Git and RStudio on a regular basis. The Git pane in RStudio simplifies common Git operations, but it’s also important to understand what’s happening behind the scenes and how to troubleshoot common issues. I introduced the most basic Git commands for working with GitHub, which provide more control for managing more complex tasks. Consider reading the freely available Pro Git book, written by Scott Chacon and Ben Straub, for a more in-depth understanding of Git.\nWhat’s next? This article only scratches the surface of Git(Hub). There are many more advanced features and best practices to explore, but let me at least outline that you now have a working CI/CD pipeline at your disposal. For example, wouldn’t it be nice to automatically run tests, check code quality, and deploy the website of an R package? This is where continuous integration and continuous deployment (CI/CD) come into play. They automate the process of testing, building, and deploying code. GitHub Actions and the usethis package make it easy to set up a CI/CD pipeline for R packages. The next code chunk demonstrates how to set up a GitHub Action, and you can refer to the GitHub website for more information.\n\n# Set up a GitHub Action\nusethis::use_github_action()\n\n# Which action do you want to add? (0 to exit)\n# (See &lt;https://github.com/r-lib/actions/tree/v2/examples&gt; for other options) \n# \n# 1: check-standard: Run `R CMD check` on Linux, macOS, and Windows\n# 2: test-coverage: Compute test coverage and report to https://about.codecov.io\n# 3: pr-commands: Add /document and /style commands for pull requests\n\n\n\n\n\nBryan, Jennifer, and Hadley Wickham. 2024. Gh: ’GitHub’ ’API’. https://CRAN.R-project.org/package=gh.\n\n\nOoms, Jeroen. 2024. Credentials: Tools for Managing SSH and Git Credentials. https://CRAN.R-project.org/package=credentials.\n\n\nTreischl, Edgar J. 2023. Practice r: An Interactive Textbook. De Gruyter Oldenbourg.\n\n\nWickham, Hadley, Jennifer Bryan, Malcolm Barrett, and Andy Teucher. 2024. Usethis: Automate Package and Project Setup. https://CRAN.R-project.org/package=usethis.\n\n\nWickham, Hadley, Jim Hester, Winston Chang, and Jennifer Bryan. 2022. Devtools: Tools to Make Developing r Packages Easier. https://CRAN.R-project.org/package=devtools.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Git(Hub): A Gentle Introduction for R Users</span>"
    ]
  },
  {
    "objectID": "07_GitHub.html#footnotes",
    "href": "07_GitHub.html#footnotes",
    "title": "7  Git(Hub): A Gentle Introduction for R Users",
    "section": "",
    "text": "This article relies on images from (Treischl 2023).↩︎",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Git(Hub): A Gentle Introduction for R Users</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Allaire, JJ, Yihui Xie, Jonathan McPherson, Javier Luraschi, Kevin\nUshey, Aron Atkins, Hadley Wickham, Joe Cheng, Winston Chang, and\nRichard Iannone. 2022. Rmarkdown: Dynamic Documents for r. https://CRAN.R-project.org/package=rmarkdown.\n\n\nBrunson, Jason Cory, and Quentin D. Read. 2020. Ggalluvial: Alluvial\nPlots in Ggplot2. https://CRAN.R-project.org/package=ggalluvial.\n\n\nBryan, Jennifer, and Hadley Wickham. 2024. Gh: ’GitHub’ ’API’.\nhttps://CRAN.R-project.org/package=gh.\n\n\nClarke, Erik, and Scott Sherrill-Mix. 2017. Ggbeeswarm: Categorical\nScatter (Violin Point) Plots. https://CRAN.R-project.org/package=ggbeeswarm.\n\n\nCsárdi, Gábor. 2022. “Keyring: Access the System Credential Store\nfrom r.” https://CRAN.R-project.org/package=keyring.\n\n\nGrothendieck, G. 2017. “Sqldf: Manipulate r Data Frames Using\nSQL.” https://CRAN.R-project.org/package=sqldf.\n\n\nGrün, Bettina, and Achim Zeileis. 2009. “Automatic Generation of\nExams in r” 29. https://doi.org/10.18637/jss.v029.i10.\n\n\nHorst, Allison Marie, Alison Presmanes Hill, and Kristen B Gorman. 2020.\n“Palmerpenguins: Palmer Archipelago (Antarctica) Penguin\nData.” https://doi.org/10.5281/zenodo.3960218.\n\n\nJeppson, Haley, Heike Hofmann, and Di Cook. 2021. Ggmosaic: Mosaic\nPlots in the Ggplot2 Framework. https://CRAN.R-project.org/package=ggmosaic.\n\n\nKahle, David, and Hadley Wickham. 2013. “Ggmap: Spatial\nVisualization with Ggplot2.” The R Journal 5 (1):\n144–61. https://journal.r-project.org/archive/2013-1/kahle-wickham.pdf.\n\n\nKahle, David, Hadley Wickham, and Scott Jackson. 2019. Ggmap:\nSpatial Visualization with Ggplot2. https://CRAN.R-project.org/package=ggmap.\n\n\nKassambara, Alboukadel, Marcin Kosinski, and Przemyslaw Biecek. 2021.\nSurvminer: Drawing Survival Curves Using Ggplot2. https://CRAN.R-project.org/package=survminer.\n\n\nLe Pennec, Erwan, and Kamil Slowikowski. 2022. Ggwordcloud: A Word\nCloud Geom for Ggplot2.\n\n\nMüller, Kirill, Hadley Wickham, David A. James, and Seth Falcon. 2022.\nRSQLite: SQLite Interface for r. https://CRAN.R-project.org/package=RSQLite.\n\n\nNeitmann, Thomas. 2020. Ggcharts: Shorten the Distance from Data\nVisualization Idea to Actual Plot. https://CRAN.R-project.org/package=ggcharts.\n\n\nOoms, Jeroen. 2024. Credentials: Tools for Managing SSH and Git\nCredentials. https://CRAN.R-project.org/package=credentials.\n\n\nPedersen, Thomas Lin, and David Robinson. 2022. Gganimate: A Grammar\nof Animated Graphics. https://CRAN.R-project.org/package=gganimate.\n\n\nR Special Interest Group on Databases (R-SIG-DB), Hadley Wickham, and\nKirill Müller. 2022. DBI: R Database Interface. https://CRAN.R-project.org/package=DBI.\n\n\nRudis, Bob, and Dave Gandy. 2017. Waffle: Create Waffle Chart\nVisualizations in r. https://CRAN.R-project.org/package=waffle.\n\n\nTreischl, Edgar J. 2023. Practice r: An Interactive Textbook.\nDe Gruyter Oldenbourg.\n\n\nUshey, Kevin, JJ Allaire, Hadley Wickham, and Gary Ritchie. 2023.\n“Rstudioapi: Safely Access the RStudio API.” https://CRAN.R-project.org/package=rstudioapi.\n\n\nWickham, Hadley. 2022. Tidyverse: Easily Install and Load the\nTidyverse. https://CRAN.R-project.org/package=tidyverse.\n\n\nWickham, Hadley, Jennifer Bryan, Malcolm Barrett, and Andy Teucher.\n2024. Usethis: Automate Package and Project Setup. https://CRAN.R-project.org/package=usethis.\n\n\nWickham, Hadley, Winston Chang, Lionel Henry, Thomas Lin Pedersen,\nKohske Takahashi, Claus Wilke, Kara Woo, Hiroaki Yutani, and Dewey\nDunnington. 2022. Ggplot2: Create Elegant Data Visualisations Using\nthe Grammar of Graphics. https://CRAN.R-project.org/package=ggplot2.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis\nVaughan. 2023. “Dplyr: A Grammar of Data Manipulation.” https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, Maximilian Girlich, and Edgar Ruiz. 2022. Dbplyr: A\nDplyr Back End for Databases. https://CRAN.R-project.org/package=dbplyr.\n\n\nWickham, Hadley, Jim Hester, Winston Chang, and Jennifer Bryan. 2022.\nDevtools: Tools to Make Developing r Packages Easier. https://CRAN.R-project.org/package=devtools.\n\n\nWilke, Claus O. 2020. Ggtext: Improved Text Rendering Support for\n’Ggplot2’. https://CRAN.R-project.org/package=ggtext.\n\n\n———. 2021. Ggridges: Ridgeline Plots in ’Ggplot2’. https://CRAN.R-project.org/package=ggridges.\n\n\nWilkins, David. 2021. Treemapify: Draw Treemaps in ’Ggplot2’.\nhttps://CRAN.R-project.org/package=treemapify.",
    "crumbs": [
      "References"
    ]
  }
]