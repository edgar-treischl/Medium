```{r setup, include=FALSE}
knitr::opts_chunk$set(
  #fig.width = 6,
  #fig.height = 4,
  fig.path = "plots/",
  echo = TRUE,
  warning = FALSE,
  message = FALSE,
  eval = TRUE,
  comment = "#>"
)

library(gist)

```

# Manage Code Snippets with GitHub Gist

Why should we consider GitHub Gist for code snippets? It is a simple way to share code snippets with others. Moreover, you can embed gists in websites, blogs, and other documents. However, the best part about Gist is that your futrue self can access your code snippets from anywhere. 

For this reason I wrote a simple R package to manage Gists. The gist package provides a set of functions to work with [GitHub Gist](https://gist.github.com/). It allows you to copy, create, and delete gists via the GitHub API. Moreover, it comes with an R Studio addin - a shiny app - to manage your Gists.

[![](plots/gist_logo.png){fig-alt="Gist R Package" fig-align="center" width="50%"}](https://edgar-treischl.github.io/gist/)

This article outlines why GitHub Gist is a great tool for code snippets and how to use the gist package. 

## Installation

You can install the development version of gist like so:

```{r, eval=FALSE}
devtools::install_github("edgar-treischl/gist")
```

In order to connect with the Git Hub API, you need to provide a GitHub API token (names as: `github_api`) with the `keyring` package. Use the `key_set()` function to store your token safely:

```{r, eval=FALSE}
#Save GitHub API token as github_api
keyring::key_set(service = "github_api")
```

## Workflow

There is no need to learn how the package works, because it comes with an R Studio addin that let you manage Gists. Go to the addin menu or use the following code to open the gist app. The app shows a list with your gist files and a preview of the code. Pick a gist and copy or insert the code. Furthermore, the app has tabs to create and delete gists as well.

```{r, eval=FALSE}
#The gistAddin()
library(gist)
gist::gistAddin()
```

![](plots/gistapp.png){fig-alt="Gist App" fig-align="center" width="75%"}

If you want to interact via R, you can use the following functions. Create a new Gist via:

```{r}
#Create a gist
gist_create(name = "A_Test.R", 
            code = '#Test
            print("Hello world")', 
            description = "Test Gist")
```

Get a gist via:

```{r, eval=FALSE}
#gistfiles lists all files and returns names and ids
gist_get(filename = "A_Test.R")

#> âœ” Copied A_Test.R from your GitHub account.
```

Set the `raw` parameter to `TRUE` in case you need the raw character vector. Finally, let us delete a gist. Therefore, you need to inspect your gists to get to know the id of a gist.

```{r}
#gistFiles lists all files and returns names and ids
mygists <- gist::gistFiles()
mygists |> head()
```

To delete a gist, give the id the `gist_delete()` function.

```{r}
#Delete a gist
gist::gist_delete(id = mygists$id[1])
```

In summary, consider GitHub Gist if your code snippets are scattered somewhere on your computer. The gist package provides a simple way to manage your Gists and the R Studio addin makes it easy to get started.



